{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dryad2dataverse - translate, transfer and track \u00b6 \u00b6 Introduction \u00b6 dryad2dataverse is an oddly specific Python package/library which comes with the highly-sought after console application which allows easier transfer of metadata and data from a Dryad data repository (ie, https://datadryad.org ) to a Dataverse repository. The app is probably what you want \u00b6 If you\u2019re interested in moving Dryad studies to Dataverse, being notified on changes and largely automating everything, the dryadd application can do all of these things without requiring any knowledge of Python or programming. All you need is basic command line knowledge and a platform with enough storage to (temporarily) hold the contents of a few Dryad records. Quick install \u00b6 pip install dryad2dataverse or, if you want to stay clear of anything related to a command line, download a compiled version of the migrator dryadd only for your computer system at the releases page . Note that binary releases are not available for all platforms, and if you want the most recent version you\u2019re better off using pip . I know how to program in Python. What does this do? \u00b6 With these tools it\u2019s possible to: a) Serialize Dryad metadata to Dataverse JSON b) Transfer Dryad studies to Dataverse without any knowledge of the somewhat complex Dataverse API c) Monitor changes in status So why would I need this? \u00b6 You are a researcher and you wish to deposit via API into Dataverse repository. You can use the tools with this package to that without needing to understand the APIs and formats of two separate platforms. You\u2019ve used Dryad, but the Dataverse JSON and API is unfamiliar and complex . You want to write your Dryad JSON and have it convert automatically to Dataverse\u2019s much more complex one. Your institution has researchers who have deposited data into Dryad and you wish to copy them into the Dataverse repository which contains the bulk of your institution\u2019s research data (for example, the Dataverse repository at https://borealisdata.ca ). And on top of that, you don\u2019t want to keep checking to see if there were any updates, so you wish to automate the process. Basic usage \u00b6 Converting JSON \u00b6 >>> #Convert Dryad JSON to Dataverse JSON and save to a file >>> import dryad2dataverse.serializer >>> i_heart_dryad = dryad2dataverse.serializer.Serializer('doi:10.5061/dryad.2rbnzs7jp') >>> with open('dataverse_json.json', 'w') as f: f.write(f'{i_heart_dryad.dvJson}') >>> #Or just view it this way in a Python session >>> i_heard_dryad.dvJson Transferring data \u00b6 Note: a number of variables must be set [correctly] for this to work, such as your target dataverse. This example continues with the Serializer instance above. >>> import dryad2dataverse.transfer >>> dv = dryad2dataverse.transfer.Transfer(i_heart_dryad) >>> # Files must first be downloaded; there is no direct transfer >>> dv.download_files() >>> # 'dryad' is the short name of the target dataverse >>> # Yours may be different >>> # First, create the study metadata >>> dv.upload_study(targetDv='dryad') >>> # Then upload the files >>> dv.upload_files() Change monitoring \u00b6 Because monitoring the status of something over time requires persistence, the dryad2dataverse.monitor.Monitor object uses an SQLite3 database, which has the enormous advantage of being a single file that is portable between systems. This allows monitoring without laborious database configuration on a host system, and updates can be run on any system that has sufficient storage space to act as an intermediary between Dryad and Dataverse. This is quite a simple database, as the documentation on its structure shows. If you need to change systems just swap the database to the new system. In theory you could run it from a Raspberry Pi Zero that you have in a desk drawer, although that may not be the wisest idea. Maybe use your cell phone. Monitoring changes requires both the Serializer and Transfer objects from above. >>> # Create the Monitor instance >>> monitor = dryad2dataverse.monitor.Monitor() >>> # Check status of your serializer object >>> monitor.status(i_heart_dryad) {'status': 'new', 'dvpid': None} >>> # imagine, now that i_still_heart_dryad is a study >>> # that was uploaded previously >>> monitor.status(i_still_heart_dryad) {'status': 'unchanged', 'dvpid': 'doi:99.99999/FK2/FAKER'} >>> #Check the difference in files >>> monitor.diff_files(i_still_heart_dryad) {} >>> # After the transfer dv above: >>> monitor.update(transfer) >>> # And then, to make your life easier, update the last time you checked Dryad >>> monitor.set_timestamp() That\u2019s great! I\u2019m going to use this for my very important data for which I have no backup. \u00b6 The dryad2dataverse library is free and open source, released under the MIT license. It\u2019s also not written by anyone with a degree in computer science, so as the MIT license says: Software is provided \"as is\", without warranty of any kind","title":"Overview"},{"location":"#dryad2dataverse-translate-transfer-and-track","text":"","title":"dryad2dataverse -  translate, transfer and track"},{"location":"#_1","text":"","title":""},{"location":"#introduction","text":"dryad2dataverse is an oddly specific Python package/library which comes with the highly-sought after console application which allows easier transfer of metadata and data from a Dryad data repository (ie, https://datadryad.org ) to a Dataverse repository.","title":"Introduction"},{"location":"#the-app-is-probably-what-you-want","text":"If you\u2019re interested in moving Dryad studies to Dataverse, being notified on changes and largely automating everything, the dryadd application can do all of these things without requiring any knowledge of Python or programming. All you need is basic command line knowledge and a platform with enough storage to (temporarily) hold the contents of a few Dryad records.","title":"The app is probably what you want"},{"location":"#quick-install","text":"pip install dryad2dataverse or, if you want to stay clear of anything related to a command line, download a compiled version of the migrator dryadd only for your computer system at the releases page . Note that binary releases are not available for all platforms, and if you want the most recent version you\u2019re better off using pip .","title":"Quick install"},{"location":"#i-know-how-to-program-in-python-what-does-this-do","text":"With these tools it\u2019s possible to: a) Serialize Dryad metadata to Dataverse JSON b) Transfer Dryad studies to Dataverse without any knowledge of the somewhat complex Dataverse API c) Monitor changes in status","title":"I know how to program in Python. What does this do?"},{"location":"#so-why-would-i-need-this","text":"You are a researcher and you wish to deposit via API into Dataverse repository. You can use the tools with this package to that without needing to understand the APIs and formats of two separate platforms. You\u2019ve used Dryad, but the Dataverse JSON and API is unfamiliar and complex . You want to write your Dryad JSON and have it convert automatically to Dataverse\u2019s much more complex one. Your institution has researchers who have deposited data into Dryad and you wish to copy them into the Dataverse repository which contains the bulk of your institution\u2019s research data (for example, the Dataverse repository at https://borealisdata.ca ). And on top of that, you don\u2019t want to keep checking to see if there were any updates, so you wish to automate the process.","title":"So why would I need this?"},{"location":"#basic-usage","text":"","title":"Basic usage"},{"location":"#converting-json","text":">>> #Convert Dryad JSON to Dataverse JSON and save to a file >>> import dryad2dataverse.serializer >>> i_heart_dryad = dryad2dataverse.serializer.Serializer('doi:10.5061/dryad.2rbnzs7jp') >>> with open('dataverse_json.json', 'w') as f: f.write(f'{i_heart_dryad.dvJson}') >>> #Or just view it this way in a Python session >>> i_heard_dryad.dvJson","title":"Converting JSON"},{"location":"#transferring-data","text":"Note: a number of variables must be set [correctly] for this to work, such as your target dataverse. This example continues with the Serializer instance above. >>> import dryad2dataverse.transfer >>> dv = dryad2dataverse.transfer.Transfer(i_heart_dryad) >>> # Files must first be downloaded; there is no direct transfer >>> dv.download_files() >>> # 'dryad' is the short name of the target dataverse >>> # Yours may be different >>> # First, create the study metadata >>> dv.upload_study(targetDv='dryad') >>> # Then upload the files >>> dv.upload_files()","title":"Transferring data"},{"location":"#change-monitoring","text":"Because monitoring the status of something over time requires persistence, the dryad2dataverse.monitor.Monitor object uses an SQLite3 database, which has the enormous advantage of being a single file that is portable between systems. This allows monitoring without laborious database configuration on a host system, and updates can be run on any system that has sufficient storage space to act as an intermediary between Dryad and Dataverse. This is quite a simple database, as the documentation on its structure shows. If you need to change systems just swap the database to the new system. In theory you could run it from a Raspberry Pi Zero that you have in a desk drawer, although that may not be the wisest idea. Maybe use your cell phone. Monitoring changes requires both the Serializer and Transfer objects from above. >>> # Create the Monitor instance >>> monitor = dryad2dataverse.monitor.Monitor() >>> # Check status of your serializer object >>> monitor.status(i_heart_dryad) {'status': 'new', 'dvpid': None} >>> # imagine, now that i_still_heart_dryad is a study >>> # that was uploaded previously >>> monitor.status(i_still_heart_dryad) {'status': 'unchanged', 'dvpid': 'doi:99.99999/FK2/FAKER'} >>> #Check the difference in files >>> monitor.diff_files(i_still_heart_dryad) {} >>> # After the transfer dv above: >>> monitor.update(transfer) >>> # And then, to make your life easier, update the last time you checked Dryad >>> monitor.set_timestamp()","title":"Change monitoring"},{"location":"#thats-great-im-going-to-use-this-for-my-very-important-data-for-which-i-have-no-backup","text":"The dryad2dataverse library is free and open source, released under the MIT license. It\u2019s also not written by anyone with a degree in computer science, so as the MIT license says: Software is provided \"as is\", without warranty of any kind","title":"That's great! I'm going to use this for my very important data for which I have no backup."},{"location":"api_reference/","text":"Complete API reference \u00b6 dryad2dataverse \u00b6 Dryad to Dataverse utilities. No modules are loaded by default, so import dryad2dataverse will work, but will have no effect. Modules included: dryad2dataverse.constants : \"Constants\" for all modules. URLs, API keys, etc are all here. dryad2dataverse.serializer : Download and serialize Dryad JSON to Dataverse JSON. dryad2dataverse.transfer : metadata and file transfer utilities. dryad2dataverse.monitor : Monitoring and database tools for maintaining a pipeline to Dataverse without unnecessary downloading and file duplication. dryad2dataverse.exceptions : Custom exceptions. dryad2dataverse.monitor \u00b6 Dryad/Dataverse status tracker. Monitor creates a singleton object which writes to a SQLite database. Methods will (generally) take either a dryad2dataverse.serializer.Serializer instance or dryad2dataverse.transfer.Transfer instance The monitor\u2019s primary function is to allow for state checking for Dryad studies so that files and studies aren\u2019t downloaded unneccessarily. Monitor Objects \u00b6 class Monitor() The Monitor object is a tracker and database updater, so that Dryad files can be monitored and updated over time. Monitor is a singleton, but is not thread-safe. __new__ \u00b6 def __new__(cls, dbase=None, *args, **kwargs) Creates a new singleton instance of Monitor. Also creates a database if existing database is not present. Arguments : dbase : str \u2014 Path to sqlite3 database. That is: /path/to/file.sqlite3 __init__ \u00b6 def __init__(dbase=None, *args, **kwargs) Initialize the Monitor instance if not instantiated already (ie, Monitor is a singleton). Arguments : dbase : str \u2014 Complete path to desired location of tracking database - (eg - /tmp/test.db). Defaults to dryad2dataverse.constants.DBASE. __del__ \u00b6 def __del__() Commits all database transactions on object deletion and closes database. lastmod \u00b6 @property def lastmod() Returns last modification date from monitor.dbase. status \u00b6 def status(serial) Returns a dictionary with keys \u2018status\u2019 and \u2018dvpid\u2019 and \u2018notes\u2019. {status :'updated', 'dvpid':'doi://some/ident'} . status is one of \u2018new\u2019, \u2018identical\u2019, \u2018lastmodsame\u2019, \u2018updated\u2019 \u2018new\u2019 is a completely new file. \u2018identical\u2019 The metadata from Dryad is identical to the last time the check was run. \u2018lastmodsame\u2019 Dryad lastModificationDate == last modification date in database AND output JSON is different. This can indicate a Dryad API output change, reindexing or something else. But the lastModificationDate is supposed to be an indicator of meaningful change, so this option exists so you can decide what to do given this option \u2018updated\u2019 Indicates changes to lastModificationDate Note that Dryad constantly changes their API output, so the changes may not actually be meaningful. dvpid is a Dataverse persistent identifier. None in the case of status=\u2019new\u2019 notes : value of Dryad versionChanges field. One of files_changed or metatdata_changed . Non-null value present only when status is not new or identical . Note that Dryad has no way to indicate both a file and metadata change, so this value reflects only the last change in the Dryad state. Arguments : serial : dryad2dataverse.serializer instance diff_metadata \u00b6 def diff_metadata(serial) Analyzes differences in metadata between current serializer instance and last updated serializer instance. Returns a list of field changes consisting of: [{key: (old_value, new_value}] or None if no changes. For example: [{'title': ('Cascading effects of algal warming in a freshwater community', 'Cascading effects of algal warming in a freshwater community theatre')} ] Arguments : serial : dryad2dataverse.serializer.Serializer instance diff_files \u00b6 def diff_files(serial) Returns a dict with additions and deletions from previous Dryad to dataverse upload. Because checksums are not necessarily included in Dryad file metadata, this method uses dryad file IDs, size, or whatever is available. If dryad2dataverse.monitor.Monitor.status() indicates a change it will produce dictionary output with a list of additions, deletions or hash changes (ie, identical except for hash changes), as below: {'add':[dyadfiletuples], 'delete:[dryadfiletuples], 'hash_change': [dryadfiletuples]} Arguments : serial : dryad2dataverse.serializer.Serializer instance get_dv_fid \u00b6 def get_dv_fid(url) Returns str \u2014 the Dataverse file ID from parsing a Dryad file download link. Normally used for determining dataverse file ids for deletion in case of dryad file changes. Arguments : url : str \u2014 Dryad file URL in form of \u2018https://datadryad.org/api/v2/files/385819/download\u2019. get_dv_fids \u00b6 def get_dv_fids(filelist) Returns Dataverse file IDs from a list of Dryad file tuples. Generally, you would use the output from dryad2dataverse.monitor.Monitor.diff_files[\u2018delete\u2019] to discover Dataverse file ids for deletion. Arguments : filelist : list \u2014 List of Dryad file tuples: eg: [('https://datadryad.org/api/v2/files/385819/download', 'GCB_ACG_Mortality_2020.zip', 'application/x-zip-compressed', 23787587), ('https://datadryad.org/api/v2/files/385820/download', 'Readme_ACG_Mortality.txt', 'text/plain', 1350)] get_json_dvfids \u00b6 def get_json_dvfids(serial) Return a list of Dataverse file ids for Dryad JSONs which were uploaded to Dataverse. Normally used to discover the file IDs to remove Dryad JSONs which have changed. Arguments : serial : dryad2dataverse.serializer.Serializer instance update \u00b6 def update(transfer) Updates the Monitor database with information from a dryad2dataverse.transfer.Transfer instance. If a Dryad primary metadata record has changes, it will be deleted from the database. This method should be called after all transfers are completed, including Dryad JSON updates, as the last action for transfer. Arguments : transfer : dryad2dataverse.transfer.Transfer instance set_timestamp \u00b6 def set_timestamp(curdate=None) Adds current time to the database table. Can be queried and be used for subsequent checking for updates. To query last modification time, use the dataverse2dryad.monitor.Monitor.lastmod attribute. Arguments : curdate : str \u2014 UTC datetime string in the format suitable for the Dryad API. eg. 2021-01-21T21:42:40Z or .strftime(\u2018%Y-%m-%dT%H:%M:%SZ\u2019). dryad2dataverse.constants \u00b6 This module contains the information that configures all the parameters required to transfer data from Dryad to Dataverse. \u201cConstants\u201d may be a bit strong, but the only constant is the presence of change. dryad2dataverse.handlers \u00b6 Custom log handlers for sending log information to recipients. SSLSMTPHandler Objects \u00b6 class SSLSMTPHandler(SMTPHandler) An SSL handler for logging.handlers emit \u00b6 def emit(record: logging.LogRecord) Emit a record while using an SSL mail server. dryad2dataverse.transfer \u00b6 This module handles data downloads and uploads from a Dryad instance to a Dataverse instance Transfer Objects \u00b6 class Transfer() Transfers metadata and data files from a Dryad installation to Dataverse installation. __init__ \u00b6 def __init__(dryad) Creates a dryad2dataverse.transfer.Transfer instance. Arguments : dryad : dryad2dataverse.serializer.Serializer instance _del__ \u00b6 def _del__() Expunges files from constants.TMP on deletion test_api_key \u00b6 def test_api_key(url=None, apikey=None) Tests for an expired API key and raises dryad2dataverse.exceptions.Dryad2dataverseBadApiKeyError the API key is bad. Ignores other HTTP errors. Arguments : url : str \u2014 Base URL to Dataverse installation. Defaults to dryad2dataverse.constants.DVURL apikey : str \u2014 Default dryad2dataverse.constants.APIKEY. dvpid \u00b6 @property def dvpid() Returns Dataverse study persistent ID as str. auth \u00b6 @property def auth() Returns datavese authentication header dict. ie: {X-Dataverse-key' : 'APIKEYSTRING'} fileJson \u00b6 @property def fileJson() Returns a list of file JSONs from call to Dryad API /files/{id}, where the ID is parsed from the Dryad JSON. Dryad file listings are paginated. files \u00b6 @property def files() Returns a list of lists with: [Download_location, filename, mimetype, size, description, md5digest] This is mutable; downloading a file will add md5 info if not available. oversize \u00b6 @property def oversize() Returns list of files exceeding Dataverse ingest limit dryad2dataverse.constants.MAX_UPLOAD. doi \u00b6 @property def doi() Returns Dryad DOI. set_correct_date \u00b6 def set_correct_date(url=None, hdl=None, d_type='distributionDate', apikey=None) Sets \u201ccorrect\u201d publication date for Dataverse. Note: dryad2dataverse.serializer maps Dryad \u2018publicationDate\u2019 to Dataverse \u2018distributionDate\u2019 (see serializer.py ~line 675). Dataverse citation date default is \u201c:publicationDate\u201d. See Dataverse API reference: https://guides.dataverse.org/en/4.20/api/native-api.html#id54. Arguments : url : str \u2014 Base URL to Dataverse installation. Defaults to dryad2dataverse.constants.DVURL hdl : str \u2014 Persistent indentifier for Dataverse study. Defaults to Transfer.dvpid (which can be None if the study has not yet been uploaded). d_type : str \u2014 Date type. One of \u2018distributionDate\u2019, \u2018productionDate\u2019, \u2018dateOfDeposit\u2019. Default \u2018distributionDate\u2019. apikey : str \u2014 Default dryad2dataverse.constants.APIKEY. upload_study \u00b6 def upload_study(url=None, apikey=None, timeout=45, **kwargs) Uploads Dryad study metadata to target Dataverse or updates existing. Supplying a targetDv kwarg creates a new study and supplying a dvpid kwarg updates a currently existing Dataverse study. Arguments : url : str \u2014 URL of Dataverse instance. Defaults to constants.DVURL. apikey : str \u2014 API key of user. Defaults to contants.APIKEY. timeout : int \u2014 timeout on POST request. KEYWORD ARGUMENTS One of these is required. Supplying both or neither raises a NoTargetError targetDv : str \u2014 Short name of target dataverse. Required if new dataset. Specify as targetDV=value. dvpid = str \u2014 Dataverse persistent ID (for updating metadata). This is not required for new uploads, specify as dvpid=value download_file \u00b6 def download_file(url, filename, tmp=None, size=None, chk=None, timeout=45) Downloads a file via requests streaming and saves to constants.TMP. returns md5sum on success and an exception on failure. Arguments : url : str \u2014 URL of download. filename : str \u2014 Output file name. timeout : int \u2014 Requests timeout. tmp : str \u2014 Temporary directory for downloads. Defaults to dryad2dataverse.constants.TMP. size : int \u2014 Reported file size in bytes. Defaults to dryad2dataverse.constants.MAX_UPLOAD. chk : str - md5 sum of file (if available and known). download_files \u00b6 def download_files(files=None) Bulk downloader for files. Arguments : files : list \u2014 Items in list can be tuples or list with a minimum of: (dryaddownloadurl, filenamewithoutpath, [md5sum]) The md5 sum should be the last member of the tuple. Defaults to self.files. Normally used without arguments to download all the associated files with a Dryad study. file_lock_check \u00b6 def file_lock_check(study, dv_url, apikey=None, count=0) Checks for a study lock Returns True if locked. Normally used to check if processing is completed. As tabular processing halts file ingest, there should be no locks on a Dataverse study before performing a data file upload. Arguments : study : str \u2014 Persistent indentifer of study. dv_url : str \u2014 URL to base Dataverse installation. apikey : str \u2014 API key for user. If not present authorization defaults to self.auth. count : int \u2014 Number of times the function has been called. Logs lock messages only on 0. force_notab_unlock \u00b6 def force_notab_unlock(study, dv_url, apikey=None) Checks for a study lock and forcibly unlocks and uningests to prevent tabular file processing. Required if mime and filename spoofing is not sufficient. Forcible unlocks require a superuser API key. Arguments : study : str \u2014 Persistent indentifer of study. dv_url : str \u2014 URL to base Dataverse installation. apikey : str \u2014 API key for user. If not present authorization defaults to self.auth. upload_file \u00b6 def upload_file(dryadUrl=None, filename=None, mimetype=None, size=None, descr=None, md5=None, studyId=None, dest=None, fprefix=None, force_unlock=False, timeout=300) Uploads file to Dataverse study. Returns a tuple of the dryadFid (or None) and Dataverse JSON from the POST request. Failures produce JSON with different status messages rather than raising an exception. Arguments : filename : str \u2014 Filename (not including path). mimetype : str \u2014 Mimetype of file. size : int \u2014 Size in bytes. studyId : str \u2014 Persistent Dataverse study identifier. Defaults to Transfer.dvpid. dest : str \u2014 Destination dataverse installation url. Defaults to constants.DVURL. md5 : str \u2014 md5 checksum for file. fprefix : str \u2014 Path to file, not including a trailing slash. timeout : int - Timeout in seconds for POST request. Default 300. dryadUrl : str - Dryad download URL if you want to include a Dryad file id. force_unlock : bool \u2014 Attempt forcible unlock instead of waiting for tabular file processing. Defaults to False. The Dataverse /locks endpoint blocks POST and DELETE requests from non-superusers (undocumented as of 31 March 2021). Forcible unlock requires a superuser API key. upload_files \u00b6 def upload_files(files=None, pid=None, fprefix=None, force_unlock=False) Uploads multiple files to study with persistentId pid. Returns a list of the original tuples plus JSON responses. Arguments : files : list \u2014 List contains tuples with (dryadDownloadURL, filename, mimetype, size). pid : str \u2014 Defaults to self.dvpid, which is generated by calling dryad2dataverse.transfer.Transfer.upload_study(). fprefix : str \u2014 File location prefix. Defaults to dryad2dataverse.constants.TMP force_unlock : bool \u2014 Attempt forcible unlock instead of waiting for tabular file processing. Defaults to False. The Dataverse /locks endpoint blocks POST and DELETE requests from non-superusers (undocumented as of 31 March 2021). Forcible unlock requires a superuser API key. upload_json \u00b6 def upload_json(studyId=None, dest=None) Uploads Dryad json as a separate file for archival purposes. Arguments : studyId : str \u2014 Dataverse persistent identifier. Default dryad2dataverse.transfer.Transfer.dvpid, which is only generated on dryad2dataverse.transfer.Transfer.upload_study() dest : str \u2014 Base URL for transfer. Default dryad2datavese.constants.DVURL delete_dv_file \u00b6 def delete_dv_file(dvfid, dvurl=None, key=None) Deletes files from Dataverse target given a dataverse file ID. This information is unknowable unless discovered by dryad2dataverse.monitor.Monitor or by other methods. Returns 1 on success (204 response), or 0 on other response. Arguments : dvurl : str \u2014 Base URL of dataverse instance. Defaults to dryad2dataverse.constants.DVURL. dvfid : str \u2014 Dataverse file ID number. delete_dv_files \u00b6 def delete_dv_files(dvfids=None, dvurl=None, key=None) Deletes all files in list of Dataverse file ids from a Dataverse installation. Arguments : dvfids : list \u2014 List of Dataverse file ids. Defaults to dryad2dataverse.transfer.Transfer.fileDelRecord. dvurl : str \u2014 Base URL of Dataverse. Defaults to dryad2dataverse.constants.DVURL. key : str \u2014 API key for Dataverse. Defaults to dryad2dataverse.constants.APIKEY. dryad2dataverse.serializer \u00b6 Serializes Dryad study JSON to Dataverse JSON, as well as producing associated file information. Serializer Objects \u00b6 class Serializer() Serializes Dryad JSON to Dataverse JSON __init__ \u00b6 def __init__(doi) Creates Dryad study metadata instance. Arguments : doi : str \u2014 DOI of Dryad study. Required for downloading. - eg - \u2018doi:10.5061/dryad.2rbnzs7jp\u2019 fetch_record \u00b6 def fetch_record(url=None, timeout=45) Fetches Dryad study record JSON from Dryad V2 API at https://datadryad.org/api/v2/datasets/. Saves to self._dryadJson. Querying Serializer.dryadJson will call this function automatically. Arguments : url : str \u2014 Dryad instance base URL (eg: \u2018https://datadryad.org\u2019). timeout : int \u2014 Timeout in seconds. Default 45. id \u00b6 @property def id() Returns Dryad unique database ID, not the DOI. Where the original Dryad JSON is dryadJson, it\u2019s the integer trailing portion of: self.dryadJson['_links']['stash:version']['href'] dryadJson \u00b6 @property def dryadJson() Returns Dryad study JSON. Will call Serializer.fetch_record() if no JSON is present. dryadJson \u00b6 @dryadJson.setter def dryadJson(value=None) Fetches Dryad JSON from Dryad website if not supplied. If supplying it, make sure it\u2019s correct or you will run into trouble with processing later. Arguments : value : dict \u2014 Dryad JSON. embargo \u00b6 @property def embargo() Check embargo status. Returns boolean True if embargoed. dvJson \u00b6 @property def dvJson() Returns Dataverse study JSON as dict. fileJson \u00b6 @property def fileJson(timeout=45) Returns a list of file JSONs from call to Dryad API /files/{id}, where the ID is parsed from the Dryad JSON. Dryad file listings are paginated, so the return consists of a list of dicts, one per page. Arguments : timeout : int \u2014 Request timeout in seconds. files \u00b6 @property def files() Returns a list of tuples with: (Download_location, filename, mimetype, size, description, digest, digestType ) Digest types include, but are not necessarily limited to: \u2018adler-32\u2019,\u2019crc-32\u2019,\u2019md2\u2019,\u2019md5\u2019,\u2019sha-1\u2019,\u2019sha-256\u2019, \u2018sha-384\u2019,\u2019sha-512\u2019 oversize \u00b6 @property def oversize(maxsize=None) Returns a list of Dryad files whose size value exceeds maxsize. Maximum size defaults to dryad2dataverse.constants.MAX_UPLOAD Arguments : maxsize : int \u2014 Size in bytes in which to flag as oversize. Defaults to constants.MAX_UPLOAD. dryad2dataverse.exceptions \u00b6 Custom exceptions for error handling. Dryad2DataverseError Objects \u00b6 class Dryad2DataverseError(Exception) Base exception class for Dryad2Dataverse errors. NoTargetError Objects \u00b6 class NoTargetError(Dryad2DataverseError) No dataverse target supplied error. DownloadSizeError Objects \u00b6 class DownloadSizeError(Dryad2DataverseError) Raised when download sizes don\u2019t match reported Dryad file size. HashError Objects \u00b6 class HashError(Dryad2DataverseError) Raised on hex digest mismatch. DatabaseError Objects \u00b6 class DatabaseError(Dryad2DataverseError) Tracking database error. DataverseUploadError Objects \u00b6 class DataverseUploadError(Dryad2DataverseError) Returned on not OK respose (ie, not requests.status_code == 200). DataverseDownloadError Objects \u00b6 class DataverseDownloadError(Dryad2DataverseError) Returned on not OK respose (ie, not requests.status_code == 200). DataverseBadApiKeyError Objects \u00b6 class DataverseBadApiKeyError(Dryad2DataverseError) Returned on not OK respose (ie, request.request.json()[\u2018message\u2019] == \u2018Bad api key \u2018).","title":"API Reference"},{"location":"api_reference/#complete-api-reference","text":"","title":"Complete API reference"},{"location":"api_reference/#dryad2dataverse","text":"Dryad to Dataverse utilities. No modules are loaded by default, so import dryad2dataverse will work, but will have no effect. Modules included: dryad2dataverse.constants : \"Constants\" for all modules. URLs, API keys, etc are all here. dryad2dataverse.serializer : Download and serialize Dryad JSON to Dataverse JSON. dryad2dataverse.transfer : metadata and file transfer utilities. dryad2dataverse.monitor : Monitoring and database tools for maintaining a pipeline to Dataverse without unnecessary downloading and file duplication. dryad2dataverse.exceptions : Custom exceptions.","title":"dryad2dataverse"},{"location":"api_reference/#dryad2dataversemonitor","text":"Dryad/Dataverse status tracker. Monitor creates a singleton object which writes to a SQLite database. Methods will (generally) take either a dryad2dataverse.serializer.Serializer instance or dryad2dataverse.transfer.Transfer instance The monitor\u2019s primary function is to allow for state checking for Dryad studies so that files and studies aren\u2019t downloaded unneccessarily.","title":"dryad2dataverse.monitor"},{"location":"api_reference/#monitor-objects","text":"class Monitor() The Monitor object is a tracker and database updater, so that Dryad files can be monitored and updated over time. Monitor is a singleton, but is not thread-safe.","title":"Monitor Objects"},{"location":"api_reference/#__new__","text":"def __new__(cls, dbase=None, *args, **kwargs) Creates a new singleton instance of Monitor. Also creates a database if existing database is not present. Arguments : dbase : str \u2014 Path to sqlite3 database. That is: /path/to/file.sqlite3","title":"__new__"},{"location":"api_reference/#__init__","text":"def __init__(dbase=None, *args, **kwargs) Initialize the Monitor instance if not instantiated already (ie, Monitor is a singleton). Arguments : dbase : str \u2014 Complete path to desired location of tracking database - (eg - /tmp/test.db). Defaults to dryad2dataverse.constants.DBASE.","title":"__init__"},{"location":"api_reference/#__del__","text":"def __del__() Commits all database transactions on object deletion and closes database.","title":"__del__"},{"location":"api_reference/#lastmod","text":"@property def lastmod() Returns last modification date from monitor.dbase.","title":"lastmod"},{"location":"api_reference/#status","text":"def status(serial) Returns a dictionary with keys \u2018status\u2019 and \u2018dvpid\u2019 and \u2018notes\u2019. {status :'updated', 'dvpid':'doi://some/ident'} . status is one of \u2018new\u2019, \u2018identical\u2019, \u2018lastmodsame\u2019, \u2018updated\u2019 \u2018new\u2019 is a completely new file. \u2018identical\u2019 The metadata from Dryad is identical to the last time the check was run. \u2018lastmodsame\u2019 Dryad lastModificationDate == last modification date in database AND output JSON is different. This can indicate a Dryad API output change, reindexing or something else. But the lastModificationDate is supposed to be an indicator of meaningful change, so this option exists so you can decide what to do given this option \u2018updated\u2019 Indicates changes to lastModificationDate Note that Dryad constantly changes their API output, so the changes may not actually be meaningful. dvpid is a Dataverse persistent identifier. None in the case of status=\u2019new\u2019 notes : value of Dryad versionChanges field. One of files_changed or metatdata_changed . Non-null value present only when status is not new or identical . Note that Dryad has no way to indicate both a file and metadata change, so this value reflects only the last change in the Dryad state. Arguments : serial : dryad2dataverse.serializer instance","title":"status"},{"location":"api_reference/#diff_metadata","text":"def diff_metadata(serial) Analyzes differences in metadata between current serializer instance and last updated serializer instance. Returns a list of field changes consisting of: [{key: (old_value, new_value}] or None if no changes. For example: [{'title': ('Cascading effects of algal warming in a freshwater community', 'Cascading effects of algal warming in a freshwater community theatre')} ] Arguments : serial : dryad2dataverse.serializer.Serializer instance","title":"diff_metadata"},{"location":"api_reference/#diff_files","text":"def diff_files(serial) Returns a dict with additions and deletions from previous Dryad to dataverse upload. Because checksums are not necessarily included in Dryad file metadata, this method uses dryad file IDs, size, or whatever is available. If dryad2dataverse.monitor.Monitor.status() indicates a change it will produce dictionary output with a list of additions, deletions or hash changes (ie, identical except for hash changes), as below: {'add':[dyadfiletuples], 'delete:[dryadfiletuples], 'hash_change': [dryadfiletuples]} Arguments : serial : dryad2dataverse.serializer.Serializer instance","title":"diff_files"},{"location":"api_reference/#get_dv_fid","text":"def get_dv_fid(url) Returns str \u2014 the Dataverse file ID from parsing a Dryad file download link. Normally used for determining dataverse file ids for deletion in case of dryad file changes. Arguments : url : str \u2014 Dryad file URL in form of \u2018https://datadryad.org/api/v2/files/385819/download\u2019.","title":"get_dv_fid"},{"location":"api_reference/#get_dv_fids","text":"def get_dv_fids(filelist) Returns Dataverse file IDs from a list of Dryad file tuples. Generally, you would use the output from dryad2dataverse.monitor.Monitor.diff_files[\u2018delete\u2019] to discover Dataverse file ids for deletion. Arguments : filelist : list \u2014 List of Dryad file tuples: eg: [('https://datadryad.org/api/v2/files/385819/download', 'GCB_ACG_Mortality_2020.zip', 'application/x-zip-compressed', 23787587), ('https://datadryad.org/api/v2/files/385820/download', 'Readme_ACG_Mortality.txt', 'text/plain', 1350)]","title":"get_dv_fids"},{"location":"api_reference/#get_json_dvfids","text":"def get_json_dvfids(serial) Return a list of Dataverse file ids for Dryad JSONs which were uploaded to Dataverse. Normally used to discover the file IDs to remove Dryad JSONs which have changed. Arguments : serial : dryad2dataverse.serializer.Serializer instance","title":"get_json_dvfids"},{"location":"api_reference/#update","text":"def update(transfer) Updates the Monitor database with information from a dryad2dataverse.transfer.Transfer instance. If a Dryad primary metadata record has changes, it will be deleted from the database. This method should be called after all transfers are completed, including Dryad JSON updates, as the last action for transfer. Arguments : transfer : dryad2dataverse.transfer.Transfer instance","title":"update"},{"location":"api_reference/#set_timestamp","text":"def set_timestamp(curdate=None) Adds current time to the database table. Can be queried and be used for subsequent checking for updates. To query last modification time, use the dataverse2dryad.monitor.Monitor.lastmod attribute. Arguments : curdate : str \u2014 UTC datetime string in the format suitable for the Dryad API. eg. 2021-01-21T21:42:40Z or .strftime(\u2018%Y-%m-%dT%H:%M:%SZ\u2019).","title":"set_timestamp"},{"location":"api_reference/#dryad2dataverseconstants","text":"This module contains the information that configures all the parameters required to transfer data from Dryad to Dataverse. \u201cConstants\u201d may be a bit strong, but the only constant is the presence of change.","title":"dryad2dataverse.constants"},{"location":"api_reference/#dryad2dataversehandlers","text":"Custom log handlers for sending log information to recipients.","title":"dryad2dataverse.handlers"},{"location":"api_reference/#sslsmtphandler-objects","text":"class SSLSMTPHandler(SMTPHandler) An SSL handler for logging.handlers","title":"SSLSMTPHandler Objects"},{"location":"api_reference/#emit","text":"def emit(record: logging.LogRecord) Emit a record while using an SSL mail server.","title":"emit"},{"location":"api_reference/#dryad2dataversetransfer","text":"This module handles data downloads and uploads from a Dryad instance to a Dataverse instance","title":"dryad2dataverse.transfer"},{"location":"api_reference/#transfer-objects","text":"class Transfer() Transfers metadata and data files from a Dryad installation to Dataverse installation.","title":"Transfer Objects"},{"location":"api_reference/#__init___1","text":"def __init__(dryad) Creates a dryad2dataverse.transfer.Transfer instance. Arguments : dryad : dryad2dataverse.serializer.Serializer instance","title":"__init__"},{"location":"api_reference/#_del__","text":"def _del__() Expunges files from constants.TMP on deletion","title":"_del__"},{"location":"api_reference/#test_api_key","text":"def test_api_key(url=None, apikey=None) Tests for an expired API key and raises dryad2dataverse.exceptions.Dryad2dataverseBadApiKeyError the API key is bad. Ignores other HTTP errors. Arguments : url : str \u2014 Base URL to Dataverse installation. Defaults to dryad2dataverse.constants.DVURL apikey : str \u2014 Default dryad2dataverse.constants.APIKEY.","title":"test_api_key"},{"location":"api_reference/#dvpid","text":"@property def dvpid() Returns Dataverse study persistent ID as str.","title":"dvpid"},{"location":"api_reference/#auth","text":"@property def auth() Returns datavese authentication header dict. ie: {X-Dataverse-key' : 'APIKEYSTRING'}","title":"auth"},{"location":"api_reference/#filejson","text":"@property def fileJson() Returns a list of file JSONs from call to Dryad API /files/{id}, where the ID is parsed from the Dryad JSON. Dryad file listings are paginated.","title":"fileJson"},{"location":"api_reference/#files","text":"@property def files() Returns a list of lists with: [Download_location, filename, mimetype, size, description, md5digest] This is mutable; downloading a file will add md5 info if not available.","title":"files"},{"location":"api_reference/#oversize","text":"@property def oversize() Returns list of files exceeding Dataverse ingest limit dryad2dataverse.constants.MAX_UPLOAD.","title":"oversize"},{"location":"api_reference/#doi","text":"@property def doi() Returns Dryad DOI.","title":"doi"},{"location":"api_reference/#set_correct_date","text":"def set_correct_date(url=None, hdl=None, d_type='distributionDate', apikey=None) Sets \u201ccorrect\u201d publication date for Dataverse. Note: dryad2dataverse.serializer maps Dryad \u2018publicationDate\u2019 to Dataverse \u2018distributionDate\u2019 (see serializer.py ~line 675). Dataverse citation date default is \u201c:publicationDate\u201d. See Dataverse API reference: https://guides.dataverse.org/en/4.20/api/native-api.html#id54. Arguments : url : str \u2014 Base URL to Dataverse installation. Defaults to dryad2dataverse.constants.DVURL hdl : str \u2014 Persistent indentifier for Dataverse study. Defaults to Transfer.dvpid (which can be None if the study has not yet been uploaded). d_type : str \u2014 Date type. One of \u2018distributionDate\u2019, \u2018productionDate\u2019, \u2018dateOfDeposit\u2019. Default \u2018distributionDate\u2019. apikey : str \u2014 Default dryad2dataverse.constants.APIKEY.","title":"set_correct_date"},{"location":"api_reference/#upload_study","text":"def upload_study(url=None, apikey=None, timeout=45, **kwargs) Uploads Dryad study metadata to target Dataverse or updates existing. Supplying a targetDv kwarg creates a new study and supplying a dvpid kwarg updates a currently existing Dataverse study. Arguments : url : str \u2014 URL of Dataverse instance. Defaults to constants.DVURL. apikey : str \u2014 API key of user. Defaults to contants.APIKEY. timeout : int \u2014 timeout on POST request. KEYWORD ARGUMENTS One of these is required. Supplying both or neither raises a NoTargetError targetDv : str \u2014 Short name of target dataverse. Required if new dataset. Specify as targetDV=value. dvpid = str \u2014 Dataverse persistent ID (for updating metadata). This is not required for new uploads, specify as dvpid=value","title":"upload_study"},{"location":"api_reference/#download_file","text":"def download_file(url, filename, tmp=None, size=None, chk=None, timeout=45) Downloads a file via requests streaming and saves to constants.TMP. returns md5sum on success and an exception on failure. Arguments : url : str \u2014 URL of download. filename : str \u2014 Output file name. timeout : int \u2014 Requests timeout. tmp : str \u2014 Temporary directory for downloads. Defaults to dryad2dataverse.constants.TMP. size : int \u2014 Reported file size in bytes. Defaults to dryad2dataverse.constants.MAX_UPLOAD. chk : str - md5 sum of file (if available and known).","title":"download_file"},{"location":"api_reference/#download_files","text":"def download_files(files=None) Bulk downloader for files. Arguments : files : list \u2014 Items in list can be tuples or list with a minimum of: (dryaddownloadurl, filenamewithoutpath, [md5sum]) The md5 sum should be the last member of the tuple. Defaults to self.files. Normally used without arguments to download all the associated files with a Dryad study.","title":"download_files"},{"location":"api_reference/#file_lock_check","text":"def file_lock_check(study, dv_url, apikey=None, count=0) Checks for a study lock Returns True if locked. Normally used to check if processing is completed. As tabular processing halts file ingest, there should be no locks on a Dataverse study before performing a data file upload. Arguments : study : str \u2014 Persistent indentifer of study. dv_url : str \u2014 URL to base Dataverse installation. apikey : str \u2014 API key for user. If not present authorization defaults to self.auth. count : int \u2014 Number of times the function has been called. Logs lock messages only on 0.","title":"file_lock_check"},{"location":"api_reference/#force_notab_unlock","text":"def force_notab_unlock(study, dv_url, apikey=None) Checks for a study lock and forcibly unlocks and uningests to prevent tabular file processing. Required if mime and filename spoofing is not sufficient. Forcible unlocks require a superuser API key. Arguments : study : str \u2014 Persistent indentifer of study. dv_url : str \u2014 URL to base Dataverse installation. apikey : str \u2014 API key for user. If not present authorization defaults to self.auth.","title":"force_notab_unlock"},{"location":"api_reference/#upload_file","text":"def upload_file(dryadUrl=None, filename=None, mimetype=None, size=None, descr=None, md5=None, studyId=None, dest=None, fprefix=None, force_unlock=False, timeout=300) Uploads file to Dataverse study. Returns a tuple of the dryadFid (or None) and Dataverse JSON from the POST request. Failures produce JSON with different status messages rather than raising an exception. Arguments : filename : str \u2014 Filename (not including path). mimetype : str \u2014 Mimetype of file. size : int \u2014 Size in bytes. studyId : str \u2014 Persistent Dataverse study identifier. Defaults to Transfer.dvpid. dest : str \u2014 Destination dataverse installation url. Defaults to constants.DVURL. md5 : str \u2014 md5 checksum for file. fprefix : str \u2014 Path to file, not including a trailing slash. timeout : int - Timeout in seconds for POST request. Default 300. dryadUrl : str - Dryad download URL if you want to include a Dryad file id. force_unlock : bool \u2014 Attempt forcible unlock instead of waiting for tabular file processing. Defaults to False. The Dataverse /locks endpoint blocks POST and DELETE requests from non-superusers (undocumented as of 31 March 2021). Forcible unlock requires a superuser API key.","title":"upload_file"},{"location":"api_reference/#upload_files","text":"def upload_files(files=None, pid=None, fprefix=None, force_unlock=False) Uploads multiple files to study with persistentId pid. Returns a list of the original tuples plus JSON responses. Arguments : files : list \u2014 List contains tuples with (dryadDownloadURL, filename, mimetype, size). pid : str \u2014 Defaults to self.dvpid, which is generated by calling dryad2dataverse.transfer.Transfer.upload_study(). fprefix : str \u2014 File location prefix. Defaults to dryad2dataverse.constants.TMP force_unlock : bool \u2014 Attempt forcible unlock instead of waiting for tabular file processing. Defaults to False. The Dataverse /locks endpoint blocks POST and DELETE requests from non-superusers (undocumented as of 31 March 2021). Forcible unlock requires a superuser API key.","title":"upload_files"},{"location":"api_reference/#upload_json","text":"def upload_json(studyId=None, dest=None) Uploads Dryad json as a separate file for archival purposes. Arguments : studyId : str \u2014 Dataverse persistent identifier. Default dryad2dataverse.transfer.Transfer.dvpid, which is only generated on dryad2dataverse.transfer.Transfer.upload_study() dest : str \u2014 Base URL for transfer. Default dryad2datavese.constants.DVURL","title":"upload_json"},{"location":"api_reference/#delete_dv_file","text":"def delete_dv_file(dvfid, dvurl=None, key=None) Deletes files from Dataverse target given a dataverse file ID. This information is unknowable unless discovered by dryad2dataverse.monitor.Monitor or by other methods. Returns 1 on success (204 response), or 0 on other response. Arguments : dvurl : str \u2014 Base URL of dataverse instance. Defaults to dryad2dataverse.constants.DVURL. dvfid : str \u2014 Dataverse file ID number.","title":"delete_dv_file"},{"location":"api_reference/#delete_dv_files","text":"def delete_dv_files(dvfids=None, dvurl=None, key=None) Deletes all files in list of Dataverse file ids from a Dataverse installation. Arguments : dvfids : list \u2014 List of Dataverse file ids. Defaults to dryad2dataverse.transfer.Transfer.fileDelRecord. dvurl : str \u2014 Base URL of Dataverse. Defaults to dryad2dataverse.constants.DVURL. key : str \u2014 API key for Dataverse. Defaults to dryad2dataverse.constants.APIKEY.","title":"delete_dv_files"},{"location":"api_reference/#dryad2dataverseserializer","text":"Serializes Dryad study JSON to Dataverse JSON, as well as producing associated file information.","title":"dryad2dataverse.serializer"},{"location":"api_reference/#serializer-objects","text":"class Serializer() Serializes Dryad JSON to Dataverse JSON","title":"Serializer Objects"},{"location":"api_reference/#__init___2","text":"def __init__(doi) Creates Dryad study metadata instance. Arguments : doi : str \u2014 DOI of Dryad study. Required for downloading. - eg - \u2018doi:10.5061/dryad.2rbnzs7jp\u2019","title":"__init__"},{"location":"api_reference/#fetch_record","text":"def fetch_record(url=None, timeout=45) Fetches Dryad study record JSON from Dryad V2 API at https://datadryad.org/api/v2/datasets/. Saves to self._dryadJson. Querying Serializer.dryadJson will call this function automatically. Arguments : url : str \u2014 Dryad instance base URL (eg: \u2018https://datadryad.org\u2019). timeout : int \u2014 Timeout in seconds. Default 45.","title":"fetch_record"},{"location":"api_reference/#id","text":"@property def id() Returns Dryad unique database ID, not the DOI. Where the original Dryad JSON is dryadJson, it\u2019s the integer trailing portion of: self.dryadJson['_links']['stash:version']['href']","title":"id"},{"location":"api_reference/#dryadjson","text":"@property def dryadJson() Returns Dryad study JSON. Will call Serializer.fetch_record() if no JSON is present.","title":"dryadJson"},{"location":"api_reference/#dryadjson_1","text":"@dryadJson.setter def dryadJson(value=None) Fetches Dryad JSON from Dryad website if not supplied. If supplying it, make sure it\u2019s correct or you will run into trouble with processing later. Arguments : value : dict \u2014 Dryad JSON.","title":"dryadJson"},{"location":"api_reference/#embargo","text":"@property def embargo() Check embargo status. Returns boolean True if embargoed.","title":"embargo"},{"location":"api_reference/#dvjson","text":"@property def dvJson() Returns Dataverse study JSON as dict.","title":"dvJson"},{"location":"api_reference/#filejson_1","text":"@property def fileJson(timeout=45) Returns a list of file JSONs from call to Dryad API /files/{id}, where the ID is parsed from the Dryad JSON. Dryad file listings are paginated, so the return consists of a list of dicts, one per page. Arguments : timeout : int \u2014 Request timeout in seconds.","title":"fileJson"},{"location":"api_reference/#files_1","text":"@property def files() Returns a list of tuples with: (Download_location, filename, mimetype, size, description, digest, digestType ) Digest types include, but are not necessarily limited to: \u2018adler-32\u2019,\u2019crc-32\u2019,\u2019md2\u2019,\u2019md5\u2019,\u2019sha-1\u2019,\u2019sha-256\u2019, \u2018sha-384\u2019,\u2019sha-512\u2019","title":"files"},{"location":"api_reference/#oversize_1","text":"@property def oversize(maxsize=None) Returns a list of Dryad files whose size value exceeds maxsize. Maximum size defaults to dryad2dataverse.constants.MAX_UPLOAD Arguments : maxsize : int \u2014 Size in bytes in which to flag as oversize. Defaults to constants.MAX_UPLOAD.","title":"oversize"},{"location":"api_reference/#dryad2dataverseexceptions","text":"Custom exceptions for error handling.","title":"dryad2dataverse.exceptions"},{"location":"api_reference/#dryad2dataverseerror-objects","text":"class Dryad2DataverseError(Exception) Base exception class for Dryad2Dataverse errors.","title":"Dryad2DataverseError Objects"},{"location":"api_reference/#notargeterror-objects","text":"class NoTargetError(Dryad2DataverseError) No dataverse target supplied error.","title":"NoTargetError Objects"},{"location":"api_reference/#downloadsizeerror-objects","text":"class DownloadSizeError(Dryad2DataverseError) Raised when download sizes don\u2019t match reported Dryad file size.","title":"DownloadSizeError Objects"},{"location":"api_reference/#hasherror-objects","text":"class HashError(Dryad2DataverseError) Raised on hex digest mismatch.","title":"HashError Objects"},{"location":"api_reference/#databaseerror-objects","text":"class DatabaseError(Dryad2DataverseError) Tracking database error.","title":"DatabaseError Objects"},{"location":"api_reference/#dataverseuploaderror-objects","text":"class DataverseUploadError(Dryad2DataverseError) Returned on not OK respose (ie, not requests.status_code == 200).","title":"DataverseUploadError Objects"},{"location":"api_reference/#dataversedownloaderror-objects","text":"class DataverseDownloadError(Dryad2DataverseError) Returned on not OK respose (ie, not requests.status_code == 200).","title":"DataverseDownloadError Objects"},{"location":"api_reference/#dataversebadapikeyerror-objects","text":"class DataverseBadApiKeyError(Dryad2DataverseError) Returned on not OK respose (ie, request.request.json()[\u2018message\u2019] == \u2018Bad api key \u2018).","title":"DataverseBadApiKeyError Objects"},{"location":"changelog/","text":"Dryad2dataverse changelog \u00b6 Perfection on the first attempt is rare. v0.6.0 - 2 May 2023 \u00b6 Updated to current Python packaging standards Installation can now be done straight from pip without resorting to git+http. . . Test framework now unittest Documentation updated dryad2dataverse.constants constants.dvurl now defaults to https://borealisdata.ca pathlib instead of os.path for greater cross-platform compatibility. v0.5.8 - 10 February 2023 \u00b6 Good lord I misspelled \u201cFebruary\u201d initially certifi requirements updated somewhat better error logging for odd requests failures Dataverse JSON change to be in compliance with new standards for v5.12+ Note that binaries will no longer be produced for dryad2dataverse. If you want one, you can either contact me and I will create one and add it to the release, or you can make one yourself using PyInstaller or Nuitka. The effort of making them vs the lack of downloads has led to this decision. If this is a problem please create an issue for discussion. v0.5.0 - 7 December 2022 \u00b6 dataverse.handlers New handler component Custom SSL log handler SSLSMTPHandler added which reduces frequency of email problems dryadd.py Mail formatting changed to ensure lines are less than 1000 characters in length to adhere to [RFC 2825 4.5.3.5] (https://www.rfc-editor.org/rfc/rfc2821#section-4.5.3.1). Logging messages contain more information Default mail service changed to Yahoo mail Default dataverse server destination changed to https://borealisdata.ca Help text cleanup v0.3.1 - 4 February 2022 \u00b6 Changes to the Dryad API sparked a few changes to dryad2dataverse and dryadd.py. More specifically, the Dryad /search API endpoint can produce false positive results, which can result in bulk study replacement when none is required. Additionally, as file IDs are not unique in Dryad (contrary to the documentation), files are no longer identified on the basis of Dryad file ID. dryad2dataverse.serializer Serial.files output now includes explicit hash type dryad2dataverse.monitor Monitor.status() now returns values of new, unchanged, updated, filesonly Monitor.status() now includes notes key Monitor.diff_files() now outputs a list of files for new studies using the add key instead of producing an empty dict. Monitor.diff_files() outputs of hash_change key listing files whose names and sizes are identical but have either a changed hash or a new one.. Note that this does not necessarily indicate a changed file as hashes have been added to existing files. Monitor.get_dv_fid() now explicitly selects highest ROWID when returning a Dryad UID as UIDs are not considered persistent identifiers (as per email from Dryad January 2022) dryadd.py Dates are now filtered by metadata lastModificationDate as Dryad search API endpoint does not respect date parameter (as per Dryad email, January 2022). Databases are now backed up with suffix of .YYYY-MM-DD-HHMM instead of generic .bak Number of backups can be specified as a parameter Switch added to halt process on excessive number of study updates Study threshold added to specify what is considered \u201cexcessive\u201d Recipients are emailed on halt due to excessive updates Verbosity increased Output now explicity includes lists of new files instead of empty dict Updates now skipped on report of unchanged or lastmodsame ; ie. metadata is identical or the lastModificationDate field in the Dryad JSON unchanged. Other Binary files are now only included as part of a Github release Binary release now includes linux x86-64 Dataverse utilities scripts removed; use dataverse_utils instead. v0.1.4 - 22 Sept 2021 \u00b6 requirements.txt Updated version requirements for urllib3 and requests to plug dependabot alert hole. dryadd.py Updated associated dryadd.py binaries to use newer versions of requests and urllib3 v0.1.3 - 10 August 2021 \u00b6 setup.py Enhanced information dryadd.py Script repair for better functioning on Windows platforms v0.1.2 - 4 May 2021 \u00b6 fixed error in setup.py added binaries of dryadd for Windows and Mac v0.1.1 - 30 April 2021 \u00b6 dryad2dataverse improved versioning system dryad2dataverse.serializer Fixed bug where keywords were only serialized when grants were present dryad2dataverse.transfer Added better defaults for transfer.set_correct_date dryad2dataverse.monitor Added meaningless change to monitor.update for internal consistency scripts/dryadd.py Show version option added transfer.set_correct_date() added to set citation to match Dryad citation. v0.1.0 - 08 April 2021 \u00b6 Initial release","title":"Changelog"},{"location":"changelog/#dryad2dataverse-changelog","text":"Perfection on the first attempt is rare.","title":"Dryad2dataverse changelog"},{"location":"changelog/#v060-2-may-2023","text":"Updated to current Python packaging standards Installation can now be done straight from pip without resorting to git+http. . . Test framework now unittest Documentation updated dryad2dataverse.constants constants.dvurl now defaults to https://borealisdata.ca pathlib instead of os.path for greater cross-platform compatibility.","title":"v0.6.0 - 2 May 2023"},{"location":"changelog/#v058-10-february-2023","text":"Good lord I misspelled \u201cFebruary\u201d initially certifi requirements updated somewhat better error logging for odd requests failures Dataverse JSON change to be in compliance with new standards for v5.12+ Note that binaries will no longer be produced for dryad2dataverse. If you want one, you can either contact me and I will create one and add it to the release, or you can make one yourself using PyInstaller or Nuitka. The effort of making them vs the lack of downloads has led to this decision. If this is a problem please create an issue for discussion.","title":"v0.5.8 - 10 February 2023"},{"location":"changelog/#v050-7-december-2022","text":"dataverse.handlers New handler component Custom SSL log handler SSLSMTPHandler added which reduces frequency of email problems dryadd.py Mail formatting changed to ensure lines are less than 1000 characters in length to adhere to [RFC 2825 4.5.3.5] (https://www.rfc-editor.org/rfc/rfc2821#section-4.5.3.1). Logging messages contain more information Default mail service changed to Yahoo mail Default dataverse server destination changed to https://borealisdata.ca Help text cleanup","title":"v0.5.0 - 7 December 2022"},{"location":"changelog/#v031-4-february-2022","text":"Changes to the Dryad API sparked a few changes to dryad2dataverse and dryadd.py. More specifically, the Dryad /search API endpoint can produce false positive results, which can result in bulk study replacement when none is required. Additionally, as file IDs are not unique in Dryad (contrary to the documentation), files are no longer identified on the basis of Dryad file ID. dryad2dataverse.serializer Serial.files output now includes explicit hash type dryad2dataverse.monitor Monitor.status() now returns values of new, unchanged, updated, filesonly Monitor.status() now includes notes key Monitor.diff_files() now outputs a list of files for new studies using the add key instead of producing an empty dict. Monitor.diff_files() outputs of hash_change key listing files whose names and sizes are identical but have either a changed hash or a new one.. Note that this does not necessarily indicate a changed file as hashes have been added to existing files. Monitor.get_dv_fid() now explicitly selects highest ROWID when returning a Dryad UID as UIDs are not considered persistent identifiers (as per email from Dryad January 2022) dryadd.py Dates are now filtered by metadata lastModificationDate as Dryad search API endpoint does not respect date parameter (as per Dryad email, January 2022). Databases are now backed up with suffix of .YYYY-MM-DD-HHMM instead of generic .bak Number of backups can be specified as a parameter Switch added to halt process on excessive number of study updates Study threshold added to specify what is considered \u201cexcessive\u201d Recipients are emailed on halt due to excessive updates Verbosity increased Output now explicity includes lists of new files instead of empty dict Updates now skipped on report of unchanged or lastmodsame ; ie. metadata is identical or the lastModificationDate field in the Dryad JSON unchanged. Other Binary files are now only included as part of a Github release Binary release now includes linux x86-64 Dataverse utilities scripts removed; use dataverse_utils instead.","title":"v0.3.1 - 4 February 2022"},{"location":"changelog/#v014-22-sept-2021","text":"requirements.txt Updated version requirements for urllib3 and requests to plug dependabot alert hole. dryadd.py Updated associated dryadd.py binaries to use newer versions of requests and urllib3","title":"v0.1.4 - 22 Sept 2021"},{"location":"changelog/#v013-10-august-2021","text":"setup.py Enhanced information dryadd.py Script repair for better functioning on Windows platforms","title":"v0.1.3 - 10 August 2021"},{"location":"changelog/#v012-4-may-2021","text":"fixed error in setup.py added binaries of dryadd for Windows and Mac","title":"v0.1.2 - 4 May 2021"},{"location":"changelog/#v011-30-april-2021","text":"dryad2dataverse improved versioning system dryad2dataverse.serializer Fixed bug where keywords were only serialized when grants were present dryad2dataverse.transfer Added better defaults for transfer.set_correct_date dryad2dataverse.monitor Added meaningless change to monitor.update for internal consistency scripts/dryadd.py Show version option added transfer.set_correct_date() added to set citation to match Dryad citation.","title":"v0.1.1 - 30 April 2021"},{"location":"changelog/#v010-08-april-2021","text":"Initial release","title":"v0.1.0 - 08 April 2021"},{"location":"compiling/","text":"Compiling and/or packaging the dryadd script \u00b6 While binaries for Windows, Mac and Linux are supplied , should you wish to create them yourself from the dryadd.py script, you can so so following the procedure below. This can be done with either nuitka or PyInstaller . Note that nuitka will compile to a C application, but PyInstaller packages everything to create a standalone application that is not a pure C application. Whether this matters is open for debate. Windows \u00b6 With nuitka : nuitka --onefile --windows-product-name=dryadd --windows-product-version=0.1.1 --windows-company-name=\"University of British Columbia Library\" \\path\\to\\dryad2dataverse\\scripts\\dryadd.py Note that the \u2013windows-product-[x] options are required, but there\u2019s nothing preventing you from using whatever information you prefer. Also, the version string listed on this page is only an example; use the current version. with PyInstaller : python -m PyInstaller -F \\path\\to\\dryad2dataverse\\scripts\\dryadd.py Mac and Linux \u00b6 with nuitka : nuitka --onefile /path/to/dryad2dataverse/scripts/dryadd.py Note that with some installations of linux, you may be required to supply a Python icon if one is not found on your system. Either download or create one (and a PNG will work) and suppy it with --linux-onefile-icon=ICON_PATH with PyInstaller : python -m PyInstaller -F \\path\\to\\dryad2dataverse\\scripts\\dryadd.py","title":"Compiling or packaging the application"},{"location":"compiling/#compiling-andor-packaging-the-dryadd-script","text":"While binaries for Windows, Mac and Linux are supplied , should you wish to create them yourself from the dryadd.py script, you can so so following the procedure below. This can be done with either nuitka or PyInstaller . Note that nuitka will compile to a C application, but PyInstaller packages everything to create a standalone application that is not a pure C application. Whether this matters is open for debate.","title":"Compiling and/or packaging the dryadd script"},{"location":"compiling/#windows","text":"With nuitka : nuitka --onefile --windows-product-name=dryadd --windows-product-version=0.1.1 --windows-company-name=\"University of British Columbia Library\" \\path\\to\\dryad2dataverse\\scripts\\dryadd.py Note that the \u2013windows-product-[x] options are required, but there\u2019s nothing preventing you from using whatever information you prefer. Also, the version string listed on this page is only an example; use the current version. with PyInstaller : python -m PyInstaller -F \\path\\to\\dryad2dataverse\\scripts\\dryadd.py","title":"Windows"},{"location":"compiling/#mac-and-linux","text":"with nuitka : nuitka --onefile /path/to/dryad2dataverse/scripts/dryadd.py Note that with some installations of linux, you may be required to supply a Python icon if one is not found on your system. Either download or create one (and a PNG will work) and suppy it with --linux-onefile-icon=ICON_PATH with PyInstaller : python -m PyInstaller -F \\path\\to\\dryad2dataverse\\scripts\\dryadd.py","title":"Mac and Linux"},{"location":"credits/","text":"Credits \u00b6 Contact \u00b6 dryad2dataverse was written by Paul Lesack of the University of British Columbia Library Research Commons . Acknowledgements \u00b6 No software development is done in a vacuum, and this project is no exception. Thanks to Eugene Barsky,Doug Brigham and Jeremy Buhler of the University of British Columbia library Research Commons for their assistance and support, to Ryan Scherle of Dryad for his help with the Dryad API, and the helpful people at Dataverse . Without the fabulous requests library and the requests toolbelt everything would have taken a great deal longer. Without pydoc-markdown , mkdocs and schemaspy the documentation would have taken much, much longer to write.","title":"Credits"},{"location":"credits/#credits","text":"","title":"Credits"},{"location":"credits/#contact","text":"dryad2dataverse was written by Paul Lesack of the University of British Columbia Library Research Commons .","title":"Contact"},{"location":"credits/#acknowledgements","text":"No software development is done in a vacuum, and this project is no exception. Thanks to Eugene Barsky,Doug Brigham and Jeremy Buhler of the University of British Columbia library Research Commons for their assistance and support, to Ryan Scherle of Dryad for his help with the Dryad API, and the helpful people at Dataverse . Without the fabulous requests library and the requests toolbelt everything would have taken a great deal longer. Without pydoc-markdown , mkdocs and schemaspy the documentation would have taken much, much longer to write.","title":"Acknowledgements"},{"location":"faq/","text":"Frequently asked questions \u00b6 Why did dryadd just download everything again? \u00b6 The Dryad API has not yet reached a stable state and the output from the API is subject to format changes. This has the possibility of triggering a potentially false positive change indication in dryad2dataverse.monitor.Monitor . Using dryad2dataverse >= v0.3.1 uses (hopefully) a more robust change checking mechanism which will eliminate (or at least drastically reduce) the number of false positive hits. In addition dryadd >= v0.4.1 includes a warning mechanism and auto-shutdown if the number of studies to be uploaded exceeds a user specified threshold, allowing the user to examine the nature of the problem to see if, in fact, there are multiple studies with changes. Note that the false positives do not upload incorrect data; they will just create a new version of the same data set. This is can be annoying and potentially use a lot of storage space, but for small collections it is more of an annoyance than a problem. Why is the upload script (dryadd.py) constantly crashing with SMTP errors? \u00b6 Updated 7 December 2022 Version 0.5.0 + should solve this issue. Google authentication using app passwords is now supported, but requires that the account use two-factor authentication. If you are not at v0.5.0+, the old, deprecated answer is: If you are using Gmail to send messages about your migration, there are a few potential hurdles. You must enable less secure app access . Even when you do that, it can still crash with no obvious explanation or a mysterious authentication error. In this case, the script may be encountering a Captcha security measure. You can remove this by going to https://accounts.google.com/DisplayUnlockCaptcha before running your script (when logged into the account which you are using, of course). The settings revert back to normal after some period of time of which I am not aware. Daily or weekly updates should be OK, but monthly ones will probably fail with SMTP errors as the service reverts to defaults. Your other option is to not use Gmail. smtplib exceptions will cause a script crash, so if you are experiencing persistent mail problems and still wish to use the script, you may wish disable emailing log messages. This is easily accomplished by commenting out the section starting with elog = email_log( in scripts/dryadd.py . Obviously you can\u2019t do this if you\u2019re using a binary dryadd. Currently email notifications are a mandatory part of the dryadd.py app, but this may be optional and/or more advanced mail handling may be available in later releases. All error messages are written to the log anyway, so if you disable emailing of log messages you can still see them in the transfer log. Why is the upload script (dryadd.py) is crashing with dryad2dataverse.exceptions.DownloadSizeError size errors? \u00b6 There are a few instances when the script will crash on an exception and this is one of them. This occurs when the download size does not match reported size of the file in Dryad. There are two obvious alternatives here. The first is that the download was corrupted in some way. In this case, you should go to your temporary file location and delete the offending file(s). Run the script again and it should continue as normal. The other, much more insidious error comes from Dryad. A very few Dryad studies have files with duplicate names. These are not visible on the web page for the study, but are visible via the file API. As the files are named on download with the names given to them by Dryad, this is a problem because two files cannot have the same name. Additionally, because only one of the files appears on the Dryad page without any associated metadata, it\u2019s not possible to tell which one is which without a manual inspection. Presumably this should not be happening, as the number of files on the Dryad web page and the number of files available via API should match. There is no way to resolve this error without consulting the people at Dryad. In this case, the only workable solution is to exclude the problematic Dryad study from the upload. Do this by noting the Dryad DOI and then using the -x, --exclude switch. python3 dryadd.py [bunch of stuff] -x doi:10.5061/dryad.7pd82 & Why is the upload script (dryadd.py) is crashing with 404 errors for data files? \u00b6 Related to the error above, in a very few instances the Dryad web page is displaying an embargo on the page, but the Dryad JSON does not have {curationStatus: Embargoed} , which means that dryad2dataverse.serializer.Serializer.embargo == False . This means that instead of skipping the download, it is attempted. But the embargo flag is incorrect and the files are unavailable, generating a 404 error. As there is no other way to determine embargo status other than by inspecting the Dryad study web page (and even then perhaps not), the solution is to exclude the DOI using the -x switch. python3 dryadd.py [bunch of stuff] -x doi:10.5061/dryad.b74d971 & Why is my transfer to Dataverse not showing up as published? \u00b6 dryad2dataverse does not publish the dataset. That must still be done via the Dataverse GUI or API. Publication functionality has been omitted by design : File size limits within a default Dataverse installation that do not apply to Dryad, so it\u2019s possible that some files need to be moved with the assistance of a Datverse system administrator Although every attempt has been made to map metadata schemas appropriately, it\u2019s undoubtedly not perfect. A quick once-over by a human can notice any unusual or unforeseen errors Metadata quality standards can vary between Dryad and a Dataverse installations. A manual curation step is sometimes desirable to ensure that all published records meet the same standards. But I don\u2019t want to manually curate my data \u00b6 It\u2019s possible to publish via the Dataverse API. If you really want to publish automatically, you can obtain a list of unpublished studies from Dataverse and publish them programatically. This is left as an exercise for the reader. Why does my large file download/upload fail? \u00b6 By default, Dataverse limits file sizes to 3 Gb, but that can vary by installation. dryad2dataverse.constants.MAX_UPLOAD contains the value which should correspond to the maximum upload size in Dataverse. If you don\u2019t know what the upload size is, contact the system administrator of your target Dataverse installation to find out. To upload files exceeding the API upload limit, you will need to speak to a Dataverse administrator. Why does my upload of files fail halfway? \u00b6 Dataverse will automatically cease ingest and lock a study when encountering a file which is suitable for tabular processing. The only way to stop this behaviour is to prohibit ingest in the Dataverse configuration, which is probably not possible for many users of the software. To circumvent this, dryad2dataverse attempts to fool Dataverse into not processing the tabular file, by changing the extension or MIME type at upload time. If this doesn\u2019t work and tabular processing starts anyway, by default the dryadd.py script will wait for tabular processing to finish before continuing with the next file. As you may imagine, that can add some time to the process. If you are a super-user , you can attempt a forcible unlock allow uploads to continue. This process, unfortunately, is not perfect as for some reason Dataverse returns 403 errors instead of unlocking, albeit infrequently. Why is a file which should not be a tabular file a tabular file? \u00b6 As a direct result of the above, tabular file processing has (hopefully) been eliminated. It\u2019s still possible to create a tabular file by reingesting it. Unless you are are the administrator of a Dataverse installation, you likely don\u2019t have control over what is or is not considered a tabular file. dryad2dataverse attempts to block all tabular file processing, but the process is imperfect. The only way to guarantee that tabular processing won\u2019t occur is to stop it on the Dataverse server. If you are not a Dataverse super-user, then you are out of luck and my poor spoofing attempts are what you get. Sic vita. Why does the code use camel case instead of snake case for variables? \u00b6 By the time I realized I should be using snake case, it was too late and I was already consistently using camel case. https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"faq/#why-did-dryadd-just-download-everything-again","text":"The Dryad API has not yet reached a stable state and the output from the API is subject to format changes. This has the possibility of triggering a potentially false positive change indication in dryad2dataverse.monitor.Monitor . Using dryad2dataverse >= v0.3.1 uses (hopefully) a more robust change checking mechanism which will eliminate (or at least drastically reduce) the number of false positive hits. In addition dryadd >= v0.4.1 includes a warning mechanism and auto-shutdown if the number of studies to be uploaded exceeds a user specified threshold, allowing the user to examine the nature of the problem to see if, in fact, there are multiple studies with changes. Note that the false positives do not upload incorrect data; they will just create a new version of the same data set. This is can be annoying and potentially use a lot of storage space, but for small collections it is more of an annoyance than a problem.","title":"Why did dryadd just download everything again?"},{"location":"faq/#why-is-the-upload-script-dryaddpy-constantly-crashing-with-smtp-errors","text":"Updated 7 December 2022 Version 0.5.0 + should solve this issue. Google authentication using app passwords is now supported, but requires that the account use two-factor authentication. If you are not at v0.5.0+, the old, deprecated answer is: If you are using Gmail to send messages about your migration, there are a few potential hurdles. You must enable less secure app access . Even when you do that, it can still crash with no obvious explanation or a mysterious authentication error. In this case, the script may be encountering a Captcha security measure. You can remove this by going to https://accounts.google.com/DisplayUnlockCaptcha before running your script (when logged into the account which you are using, of course). The settings revert back to normal after some period of time of which I am not aware. Daily or weekly updates should be OK, but monthly ones will probably fail with SMTP errors as the service reverts to defaults. Your other option is to not use Gmail. smtplib exceptions will cause a script crash, so if you are experiencing persistent mail problems and still wish to use the script, you may wish disable emailing log messages. This is easily accomplished by commenting out the section starting with elog = email_log( in scripts/dryadd.py . Obviously you can\u2019t do this if you\u2019re using a binary dryadd. Currently email notifications are a mandatory part of the dryadd.py app, but this may be optional and/or more advanced mail handling may be available in later releases. All error messages are written to the log anyway, so if you disable emailing of log messages you can still see them in the transfer log.","title":"Why is the upload script (dryadd.py) constantly crashing with SMTP errors?"},{"location":"faq/#why-is-the-upload-script-dryaddpy-is-crashing-with-dryad2dataverseexceptionsdownloadsizeerror-size-errors","text":"There are a few instances when the script will crash on an exception and this is one of them. This occurs when the download size does not match reported size of the file in Dryad. There are two obvious alternatives here. The first is that the download was corrupted in some way. In this case, you should go to your temporary file location and delete the offending file(s). Run the script again and it should continue as normal. The other, much more insidious error comes from Dryad. A very few Dryad studies have files with duplicate names. These are not visible on the web page for the study, but are visible via the file API. As the files are named on download with the names given to them by Dryad, this is a problem because two files cannot have the same name. Additionally, because only one of the files appears on the Dryad page without any associated metadata, it\u2019s not possible to tell which one is which without a manual inspection. Presumably this should not be happening, as the number of files on the Dryad web page and the number of files available via API should match. There is no way to resolve this error without consulting the people at Dryad. In this case, the only workable solution is to exclude the problematic Dryad study from the upload. Do this by noting the Dryad DOI and then using the -x, --exclude switch. python3 dryadd.py [bunch of stuff] -x doi:10.5061/dryad.7pd82 &","title":"Why is the upload script (dryadd.py) is crashing with dryad2dataverse.exceptions.DownloadSizeError size errors?"},{"location":"faq/#why-is-the-upload-script-dryaddpy-is-crashing-with-404-errors-for-data-files","text":"Related to the error above, in a very few instances the Dryad web page is displaying an embargo on the page, but the Dryad JSON does not have {curationStatus: Embargoed} , which means that dryad2dataverse.serializer.Serializer.embargo == False . This means that instead of skipping the download, it is attempted. But the embargo flag is incorrect and the files are unavailable, generating a 404 error. As there is no other way to determine embargo status other than by inspecting the Dryad study web page (and even then perhaps not), the solution is to exclude the DOI using the -x switch. python3 dryadd.py [bunch of stuff] -x doi:10.5061/dryad.b74d971 &","title":"Why is the upload script (dryadd.py) is crashing with 404 errors for data files?"},{"location":"faq/#why-is-my-transfer-to-dataverse-not-showing-up-as-published","text":"dryad2dataverse does not publish the dataset. That must still be done via the Dataverse GUI or API. Publication functionality has been omitted by design : File size limits within a default Dataverse installation that do not apply to Dryad, so it\u2019s possible that some files need to be moved with the assistance of a Datverse system administrator Although every attempt has been made to map metadata schemas appropriately, it\u2019s undoubtedly not perfect. A quick once-over by a human can notice any unusual or unforeseen errors Metadata quality standards can vary between Dryad and a Dataverse installations. A manual curation step is sometimes desirable to ensure that all published records meet the same standards.","title":"Why is my transfer to Dataverse not showing up as published?"},{"location":"faq/#but-i-dont-want-to-manually-curate-my-data","text":"It\u2019s possible to publish via the Dataverse API. If you really want to publish automatically, you can obtain a list of unpublished studies from Dataverse and publish them programatically. This is left as an exercise for the reader.","title":"But I don't want to manually curate my data"},{"location":"faq/#why-does-my-large-file-downloadupload-fail","text":"By default, Dataverse limits file sizes to 3 Gb, but that can vary by installation. dryad2dataverse.constants.MAX_UPLOAD contains the value which should correspond to the maximum upload size in Dataverse. If you don\u2019t know what the upload size is, contact the system administrator of your target Dataverse installation to find out. To upload files exceeding the API upload limit, you will need to speak to a Dataverse administrator.","title":"Why does my large file download/upload fail?"},{"location":"faq/#why-does-my-upload-of-files-fail-halfway","text":"Dataverse will automatically cease ingest and lock a study when encountering a file which is suitable for tabular processing. The only way to stop this behaviour is to prohibit ingest in the Dataverse configuration, which is probably not possible for many users of the software. To circumvent this, dryad2dataverse attempts to fool Dataverse into not processing the tabular file, by changing the extension or MIME type at upload time. If this doesn\u2019t work and tabular processing starts anyway, by default the dryadd.py script will wait for tabular processing to finish before continuing with the next file. As you may imagine, that can add some time to the process. If you are a super-user , you can attempt a forcible unlock allow uploads to continue. This process, unfortunately, is not perfect as for some reason Dataverse returns 403 errors instead of unlocking, albeit infrequently.","title":"Why does my upload of files fail halfway?"},{"location":"faq/#why-is-a-file-which-should-not-be-a-tabular-file-a-tabular-file","text":"As a direct result of the above, tabular file processing has (hopefully) been eliminated. It\u2019s still possible to create a tabular file by reingesting it. Unless you are are the administrator of a Dataverse installation, you likely don\u2019t have control over what is or is not considered a tabular file. dryad2dataverse attempts to block all tabular file processing, but the process is imperfect. The only way to guarantee that tabular processing won\u2019t occur is to stop it on the Dataverse server. If you are not a Dataverse super-user, then you are out of luck and my poor spoofing attempts are what you get. Sic vita.","title":"Why is a file which should not be a tabular file a tabular file?"},{"location":"faq/#why-does-the-code-use-camel-case-instead-of-snake-case-for-variables","text":"By the time I realized I should be using snake case, it was too late and I was already consistently using camel case. https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds","title":"Why does the code use camel case instead of snake case for variables?"},{"location":"installation/","text":"Installation \u00b6 This is not a complete list of installation methods. For a complete guide to Python package installation, please see https://packaging.python.org/tutorials/installing-packages/ . As a baseline, you will need to install a version of Python >= 3.6. Simple installation using Pip \u00b6 Once you\u2019ve installed Python, installation via pip is very simple: pip install dryad2dataverse Of course, if you want to use a branch other than master , you can switch master for the branch you want. This is not recommended, though, as the master branch contains the most current [stable] release. Installing from the Github repository \u00b6 If you require a specific commit, branch, etc, you can install directly from Github using pip : pip install git+https://github.com/ubc-library-rc/dryad2dataverse.git@master Of course, you can also install other branches or specific commits as required; see the documentation for pip on how to do that. Manual Download \u00b6 Precompiled binaries \u00b6 Compiled versions of the dryadd migrator for selected operating systems and architectures are available at the releases page . Note that binary releases may lag behind the Python, and of course the binary files don\u2019t include the Python package. From local source code \u00b6 The source code for this project is available at https://github.com/ubc-library-rc/dryad2dataverse To install, first clone the repository: git clone https://github.com/ubc-library-rc/dryad2dataverse.git This will place the source at whatever/directory/you/are/in/dryad2dataverse If you wish to install with pip , you can use: cd dryad2dataverse pip install . or, if you are planning to tinker with the source code: pip install -e . Using dryad2dataverse with a virtual environment \u00b6 First create a directory that will hold your virtual environment In a terminal, change to that directory install the virtual environment using: python3 -m venv . Activate the virtual environment: source bin/activate (Linux and Mac) or .\\Scripts\\activate on Windows. Install as per one of the methods above. More information on virtual environments can be found on the Python website: https://docs.python.org/3.6/tutorial/venv.html Keeping up to date \u00b6 If you have installed with pip, upgrading is easy: pip install --upgrade dryad2dataverse.git","title":"Installation"},{"location":"installation/#installation","text":"This is not a complete list of installation methods. For a complete guide to Python package installation, please see https://packaging.python.org/tutorials/installing-packages/ . As a baseline, you will need to install a version of Python >= 3.6.","title":"Installation"},{"location":"installation/#simple-installation-using-pip","text":"Once you\u2019ve installed Python, installation via pip is very simple: pip install dryad2dataverse Of course, if you want to use a branch other than master , you can switch master for the branch you want. This is not recommended, though, as the master branch contains the most current [stable] release.","title":"Simple installation using Pip"},{"location":"installation/#installing-from-the-github-repository","text":"If you require a specific commit, branch, etc, you can install directly from Github using pip : pip install git+https://github.com/ubc-library-rc/dryad2dataverse.git@master Of course, you can also install other branches or specific commits as required; see the documentation for pip on how to do that.","title":"Installing from the Github repository"},{"location":"installation/#manual-download","text":"","title":"Manual Download"},{"location":"installation/#precompiled-binaries","text":"Compiled versions of the dryadd migrator for selected operating systems and architectures are available at the releases page . Note that binary releases may lag behind the Python, and of course the binary files don\u2019t include the Python package.","title":"Precompiled binaries"},{"location":"installation/#from-local-source-code","text":"The source code for this project is available at https://github.com/ubc-library-rc/dryad2dataverse To install, first clone the repository: git clone https://github.com/ubc-library-rc/dryad2dataverse.git This will place the source at whatever/directory/you/are/in/dryad2dataverse If you wish to install with pip , you can use: cd dryad2dataverse pip install . or, if you are planning to tinker with the source code: pip install -e .","title":"From local source code"},{"location":"installation/#using-dryad2dataverse-with-a-virtual-environment","text":"First create a directory that will hold your virtual environment In a terminal, change to that directory install the virtual environment using: python3 -m venv . Activate the virtual environment: source bin/activate (Linux and Mac) or .\\Scripts\\activate on Windows. Install as per one of the methods above. More information on virtual environments can be found on the Python website: https://docs.python.org/3.6/tutorial/venv.html","title":"Using dryad2dataverse with a virtual environment"},{"location":"installation/#keeping-up-to-date","text":"If you have installed with pip, upgrading is easy: pip install --upgrade dryad2dataverse.git","title":"Keeping up to date"},{"location":"other_utils/","text":"Other useful dataverse utilities \u00b6 Other utilities, such as bulk release and delete utilities, can be very useful when dealing with Dataverse installations. These utilities are now in one collection, installable as a separate product: Get dataverse_utils The tools formerly included on this page are there, as well as other potentially useful utilities.","title":"Other utilities"},{"location":"other_utils/#other-useful-dataverse-utilities","text":"Other utilities, such as bulk release and delete utilities, can be very useful when dealing with Dataverse installations. These utilities are now in one collection, installable as a separate product: Get dataverse_utils The tools formerly included on this page are there, as well as other potentially useful utilities.","title":"Other useful dataverse utilities"},{"location":"reference/","text":"General Reference \u00b6 This page covers material that isn\u2019t automatically generated from the source code, that is, the API reference section. Information regarding specific modules is below. dryad2dataverse.constants \u00b6 And by \u201cconstants\u201d, you should change these as required. This module contains the information that configures all the parameters required to transfer data from Dryad to Dataverse. As \u2018constants\u2019 don\u2019t generally change, there\u2019s a non-zero chance that the name of this module will change. General variables \u00b6 RETRY_STRATEGY + This is a urllib3.util Retry object which controls the connection attemps of a requests.Session object. Not all connections are guaranteed to be successful the first time round, and the Retry object will allow multiple connection attempts before raising an exception. + Default: 10 attempts, with exponentially increased times between attempts. + For more information/a tutorial on how to use the Retry object, please see https://findwork.dev/blog/advanced-usage-python-requests-timeouts-retries-hooks/#retry-on-failure DRYURL + Base URL for the Dryad data repository. + Default = \u2018https://datadryad.org\u2019 It\u2019s unlikely you will ever change this, but Dryad is an open source project, so it\u2019s not out of the realm of possibility that there will be another Dryad-style repository. TMP + Temporary file download location. Note that downloaded files have the potential of being very large, so select a directory which has sufficient space. + Default =\u2019/tmp\u2019 This is configured for *nix style environments. Windows does not, by default, have /tmp directory, for instance. Data transfer variables \u00b6 DVURL + Base URL for dataverse installation + Default = \u2018https://dataverse.scholarsportal.info\u2019 Obviously, if you are not transferring your data to the Scholars Portal , you will need to change this. APIKEY + Dataverse API key for user performing transfer. Sufficient privileges for upload and metadata manipulation must be attached to the user. See Dataverse API documentation for an explanation of the privilege level required. + Default = None To avoid issues, using an API key which has administrator privileges for the target dataverse is the easiest apprach. MAX_UPLOAD + Maximum upload file size in bytes. Files exceeding this size will be ignored. By default, Dataverse has a 3GB upload size limit + Default = 3221225472 Files will not be downloaded or uploaded if their (reported) size exceeds this limit. DV_CONTACT_EMAIL + Dataverse \u201cContact\u201d email address. Required as part of Dataverse metadata. This would generally be the email address of the data set curator + Default= None API uploads to Dataverse fail without a contact email. While dryad2dataverse attempts to read email addresses from Dryad records, they are not required in Dryad. DV_CONTACT_NAME + Dataverse \u201cContact\u201d name. Required as part of Dataverse metadata. Generally the name of the data set curator, whether individual or an organization + Default = None As with contact email addresses, contact names are required in Dataverse, but not in Dryad. NOTAB + File extensions which should have tabular processing disabled. Lower case only. + Dataverse will immediately cease ingest and lock a dataset when encountering a file which can be processed to .tab format. This causes upload crashes unless disabled. + Files may be converted to .tab format after upload using Dataverse\u2019s reingest endpoint: https://guides.dataverse.org/en/latest/api/native-api.html#reingest-a-file + Default = [\u2018.sav\u2019, \u2018.por\u2019, \u2018.zip\u2019, \u2018.csv\u2019, \u2018.tsv\u2019, \u2018.dta\u2019, \u2018.rdata\u2019, \u2018.xslx\u2019] If one of the files in the upload triggers tabular processing the upload will suddenly cease and fail. This behaviour is built into Dataverse (unfortunately), and can be only overcome through workarounds such as double-zipping files, or, in this case, spoofing MIME types and extensions. Because Dataverse\u2019s tabular file processing capabilities are subject to change, this is not an exhaustive list and some files may be processed regardless. See also dryad2dataverse.transfer.Transfer.force_notab_unlock(). Monitoring database variables \u00b6 HOME + Home directory path for user + Default = os.path.expanduser(\u2018~\u2019) Home directory for the user. There is probably no reason to change this. DBASE + Full path for transfer monitoring sqlite3 database + Default = HOME + os.sep + \u2018dryad_dataverse_monitor.sqlite3\u2019 By default, the monitoring/tracking database will be created in the user\u2019s home directory, which is convenient but not necessarily not ideal. The location can also be set on instantiation of dryad2dataverse.monitor.Monitor : eg monitor = dryad2dataverse.monitor.Monitor('/path/to/tracking/directory/databasename.sqlite3')","title":"General Reference"},{"location":"reference/#general-reference","text":"This page covers material that isn\u2019t automatically generated from the source code, that is, the API reference section. Information regarding specific modules is below.","title":"General Reference"},{"location":"reference/#dryad2dataverseconstants","text":"And by \u201cconstants\u201d, you should change these as required. This module contains the information that configures all the parameters required to transfer data from Dryad to Dataverse. As \u2018constants\u2019 don\u2019t generally change, there\u2019s a non-zero chance that the name of this module will change.","title":"dryad2dataverse.constants"},{"location":"reference/#general-variables","text":"RETRY_STRATEGY + This is a urllib3.util Retry object which controls the connection attemps of a requests.Session object. Not all connections are guaranteed to be successful the first time round, and the Retry object will allow multiple connection attempts before raising an exception. + Default: 10 attempts, with exponentially increased times between attempts. + For more information/a tutorial on how to use the Retry object, please see https://findwork.dev/blog/advanced-usage-python-requests-timeouts-retries-hooks/#retry-on-failure DRYURL + Base URL for the Dryad data repository. + Default = \u2018https://datadryad.org\u2019 It\u2019s unlikely you will ever change this, but Dryad is an open source project, so it\u2019s not out of the realm of possibility that there will be another Dryad-style repository. TMP + Temporary file download location. Note that downloaded files have the potential of being very large, so select a directory which has sufficient space. + Default =\u2019/tmp\u2019 This is configured for *nix style environments. Windows does not, by default, have /tmp directory, for instance.","title":"General variables"},{"location":"reference/#data-transfer-variables","text":"DVURL + Base URL for dataverse installation + Default = \u2018https://dataverse.scholarsportal.info\u2019 Obviously, if you are not transferring your data to the Scholars Portal , you will need to change this. APIKEY + Dataverse API key for user performing transfer. Sufficient privileges for upload and metadata manipulation must be attached to the user. See Dataverse API documentation for an explanation of the privilege level required. + Default = None To avoid issues, using an API key which has administrator privileges for the target dataverse is the easiest apprach. MAX_UPLOAD + Maximum upload file size in bytes. Files exceeding this size will be ignored. By default, Dataverse has a 3GB upload size limit + Default = 3221225472 Files will not be downloaded or uploaded if their (reported) size exceeds this limit. DV_CONTACT_EMAIL + Dataverse \u201cContact\u201d email address. Required as part of Dataverse metadata. This would generally be the email address of the data set curator + Default= None API uploads to Dataverse fail without a contact email. While dryad2dataverse attempts to read email addresses from Dryad records, they are not required in Dryad. DV_CONTACT_NAME + Dataverse \u201cContact\u201d name. Required as part of Dataverse metadata. Generally the name of the data set curator, whether individual or an organization + Default = None As with contact email addresses, contact names are required in Dataverse, but not in Dryad. NOTAB + File extensions which should have tabular processing disabled. Lower case only. + Dataverse will immediately cease ingest and lock a dataset when encountering a file which can be processed to .tab format. This causes upload crashes unless disabled. + Files may be converted to .tab format after upload using Dataverse\u2019s reingest endpoint: https://guides.dataverse.org/en/latest/api/native-api.html#reingest-a-file + Default = [\u2018.sav\u2019, \u2018.por\u2019, \u2018.zip\u2019, \u2018.csv\u2019, \u2018.tsv\u2019, \u2018.dta\u2019, \u2018.rdata\u2019, \u2018.xslx\u2019] If one of the files in the upload triggers tabular processing the upload will suddenly cease and fail. This behaviour is built into Dataverse (unfortunately), and can be only overcome through workarounds such as double-zipping files, or, in this case, spoofing MIME types and extensions. Because Dataverse\u2019s tabular file processing capabilities are subject to change, this is not an exhaustive list and some files may be processed regardless. See also dryad2dataverse.transfer.Transfer.force_notab_unlock().","title":"Data transfer variables"},{"location":"reference/#monitoring-database-variables","text":"HOME + Home directory path for user + Default = os.path.expanduser(\u2018~\u2019) Home directory for the user. There is probably no reason to change this. DBASE + Full path for transfer monitoring sqlite3 database + Default = HOME + os.sep + \u2018dryad_dataverse_monitor.sqlite3\u2019 By default, the monitoring/tracking database will be created in the user\u2019s home directory, which is convenient but not necessarily not ideal. The location can also be set on instantiation of dryad2dataverse.monitor.Monitor : eg monitor = dryad2dataverse.monitor.Monitor('/path/to/tracking/directory/databasename.sqlite3')","title":"Monitoring database variables"},{"location":"script/","text":"Automated migrator and tracker - dryadd \u00b6 While it\u2019s all very nice that there\u2019s code that can migrate Dryad material to Dataverse, many users are not familiar enough with Python/programming or, just as likely, don\u2019t want to have to program things themselves. Anyone transferring from Dryad to Dataverse is likely doing a variant of the same thing, which consists of: Finding new Dryad material, usually from their own institution Moving it to Dataverse and possibly: Checking for updates and handling those automatically Included with dryad2dataverse package is a console application called dryadd which does all of this. Or, if you don\u2019t even want to install dryad2dtaverse, binary files for Windows, MacOS and Linux . Depending on what computing platform and installation method you use, the application will be called dryadd.py, dryadd , dryadd_linux or dryadd.exe . Note that there are a wide variety of system architectures available, but not all of them. The most current version of dryadd will always be available if you install via pip . The binary files may lag behind and/or not get every release Note that these utilities are console programs. That is, they do not have a GUI and are meant to be run from the command line in a Windows DOS prompt or PowerShell session or a terminal in the case of other platforms. An important caveat \u00b6 This product will not publish anything in a Dataverse installation (at this time, at least). This is intentional to allow a human-based curatorial step before releasing any data onto an unsuspecting audience. There\u2019s no error like systemic error, so not automatically releasing material should help alleviate this. Usage \u00b6 The implementation is relatively straightforward. Simply supply the required parameters and the software should do the rest. The help menu below is available from the command line by either running the script without inputs or by using the -h switch. usage: dryadd [-h] [-u URL] -k KEY -t TARGET -e EMAIL -s USER -r RECIPIENTS [RECIPIENTS ...] -p PWD [--server MAILSERV] [--port PORT] -c CONTACT -n CNAME [-v] -i ROR [--tmpfile TMP] [--db DBASE] [--log LOG] [-l] [-x EXCLUDE [EXCLUDE ...]] [-b NUM_BACKUPS] [-w] [--warn-threshold WARN] [--version] Dryad to Dataverse importer/monitor. All arguments NOT enclosed by square brackets are required for the script to run but some may already have defaults, specified by \"Default\". The \"optional arguments\" below refers to the use of the option switch, (like -u), meaning \"not a positional argument.\" options: -h, --help show this help message and exit -u URL, --dv-url URL Destination Dataverse root url. Default: https://borealisdata.ca -k KEY, --key KEY REQUIRED: API key for dataverse user -t TARGET, --target TARGET REQUIRED: Target dataverse short name -e EMAIL, --email EMAIL REQUIRED: Email address which sends update notifications. ie: \"user@website.invalid\". -s USER, --user USER REQUIRED: User name for SMTP server. Check your server for details. -r RECIPIENTS [RECIPIENTS ...], --recipient RECIPIENTS [RECIPIENTS ...] REQUIRED: Recipient(s) of email notification. Separate addresses with spaces -p PWD, --pwd PWD REQUIRED: Password for sending email account. Enclose in single quotes to avoid OS errors with special characters. --server MAILSERV Mail server for sending account. Default: smtp.mail.yahoo.com --port PORT Mail server port. Default: 465. Mail is sent using SSL. -c CONTACT, --contact CONTACT REQUIRED: Contact email address for Dataverse records. Must pass Dataverse email validation rules (so \"test@test.invalid\" is not acceptable). -n CNAME, --contact-name CNAME REQUIRED: Contact name for Dataverse records -v, --verbosity Verbose output -i ROR, --ror ROR REQUIRED: Institutional ROR URL. Eg: \"https://ror.org/03rmrcq20\". This identifies the institution in Dryad repositories. --tmpfile TMP Temporary file location. Default: /tmp --db DBASE Tracking database location and name. Default: $HOME/dryad_dataverse_monitor.sqlite3 --log LOG Complete path to log. Default: /var/log/dryadd.log -l, --no_force_unlock No forcible file unlock. Required if /lock endpint is restricted -x EXCLUDE [EXCLUDE ...], --exclude EXCLUDE [EXCLUDE ...] Exclude these DOIs. Separate by spaces -b NUM_BACKUPS, --num-backups NUM_BACKUPS Number of database backups to keep. Default 3 -w, --warn-too-many Warn and halt execution if abnormally large number of updates present. --warn-threshold WARN Do not transfer studies if number of updates is greater than or equal to this number. Default: 15 --version Show version number and exit Requirements \u00b6 Software If you installed using pip the requirements will be filled by default (see the installation document for more details). If using a binary file, it must be supported by your operating system and system architecture (eg. Intel Mac). Hardware You will need sufficient storage space on your system to hold the contents of the largest Dryad record that you are transferring. This is not necessarily a small amount; Dryad studies can range into the tens or hundreds of Gb, which means that a \u201cnormal\u201d /tmp directory will normally not have enough space allocated to it. The software will work on one study at a time and delete the files as it goes, but there are studies in the Dryad repository that are huge, even if most of them are quite small. Other A destination Dataverse must exist, and you should know its short name. The API key must have sufficient privileges to create new studies and upload data. You will need an email address for contact information as this is a required field in Dataverse (but not necessarily in Dryad) and a name to go with it. For example, i_heart_data@test.invalid and Dataverse Support . Note: Use a valid email address (unlike the example) because uploads will also fail if the address is invalid. Information for an email address which sends notifications The sending email address (\u201cuser@test.invalid\u201d) The user name (usually, but not always, \u201cuser\u201d from \u201cuser@test.invalid\u201d) The password for this account The smtp server address which sends mail. For example, if using gmail, it\u2019s smtp.gmail.com The port required to send email via SSL. At least one email address to receive update and error notifications. This can be the same as the sender. A place to store your sqlite3 tracking database. A note about GMail Dryad2dataverse is now set up to use yahoo email by default, because it doesn\u2019t require two-factor authentication to use. If you decide to use Google mail, you will need to follow the procedure outlined here https://support.google.com/accounts/answer/185833?hl=en . Note that it will require enabling two-factor authentication. Updates to Dryad studies The software is designed to automatically update changed studies. Simply run the utility with the same parameters as the previous run and any studies in Dataverse will be updated Miscellaneous The dryadd/.py/.exe works best if run at intervals. This can easily be achieved by adding it to your system\u2019s crontab or using the Windows scheduler. Currently it does not run as a system or service, although it may in the future. Dryad itself is constantly changing, as is Dataverse. Although the software should work predictably, changes in both the Dryad API and Dataverse API can cause unforeseen consequences. To act as a backup against catastrophic error, the monitoring database is automatically copied and renamed with a timestamp. Although the default number of backups is 3 by default, any number of backups can be kept. Obviously, if you run the software once a minute this isn\u2019t helpful, but it could be if you update once a month.","title":"The dryadd console application"},{"location":"script/#automated-migrator-and-tracker-dryadd","text":"While it\u2019s all very nice that there\u2019s code that can migrate Dryad material to Dataverse, many users are not familiar enough with Python/programming or, just as likely, don\u2019t want to have to program things themselves. Anyone transferring from Dryad to Dataverse is likely doing a variant of the same thing, which consists of: Finding new Dryad material, usually from their own institution Moving it to Dataverse and possibly: Checking for updates and handling those automatically Included with dryad2dataverse package is a console application called dryadd which does all of this. Or, if you don\u2019t even want to install dryad2dtaverse, binary files for Windows, MacOS and Linux . Depending on what computing platform and installation method you use, the application will be called dryadd.py, dryadd , dryadd_linux or dryadd.exe . Note that there are a wide variety of system architectures available, but not all of them. The most current version of dryadd will always be available if you install via pip . The binary files may lag behind and/or not get every release Note that these utilities are console programs. That is, they do not have a GUI and are meant to be run from the command line in a Windows DOS prompt or PowerShell session or a terminal in the case of other platforms.","title":"Automated migrator and tracker - dryadd"},{"location":"script/#an-important-caveat","text":"This product will not publish anything in a Dataverse installation (at this time, at least). This is intentional to allow a human-based curatorial step before releasing any data onto an unsuspecting audience. There\u2019s no error like systemic error, so not automatically releasing material should help alleviate this.","title":"An important caveat"},{"location":"script/#usage","text":"The implementation is relatively straightforward. Simply supply the required parameters and the software should do the rest. The help menu below is available from the command line by either running the script without inputs or by using the -h switch. usage: dryadd [-h] [-u URL] -k KEY -t TARGET -e EMAIL -s USER -r RECIPIENTS [RECIPIENTS ...] -p PWD [--server MAILSERV] [--port PORT] -c CONTACT -n CNAME [-v] -i ROR [--tmpfile TMP] [--db DBASE] [--log LOG] [-l] [-x EXCLUDE [EXCLUDE ...]] [-b NUM_BACKUPS] [-w] [--warn-threshold WARN] [--version] Dryad to Dataverse importer/monitor. All arguments NOT enclosed by square brackets are required for the script to run but some may already have defaults, specified by \"Default\". The \"optional arguments\" below refers to the use of the option switch, (like -u), meaning \"not a positional argument.\" options: -h, --help show this help message and exit -u URL, --dv-url URL Destination Dataverse root url. Default: https://borealisdata.ca -k KEY, --key KEY REQUIRED: API key for dataverse user -t TARGET, --target TARGET REQUIRED: Target dataverse short name -e EMAIL, --email EMAIL REQUIRED: Email address which sends update notifications. ie: \"user@website.invalid\". -s USER, --user USER REQUIRED: User name for SMTP server. Check your server for details. -r RECIPIENTS [RECIPIENTS ...], --recipient RECIPIENTS [RECIPIENTS ...] REQUIRED: Recipient(s) of email notification. Separate addresses with spaces -p PWD, --pwd PWD REQUIRED: Password for sending email account. Enclose in single quotes to avoid OS errors with special characters. --server MAILSERV Mail server for sending account. Default: smtp.mail.yahoo.com --port PORT Mail server port. Default: 465. Mail is sent using SSL. -c CONTACT, --contact CONTACT REQUIRED: Contact email address for Dataverse records. Must pass Dataverse email validation rules (so \"test@test.invalid\" is not acceptable). -n CNAME, --contact-name CNAME REQUIRED: Contact name for Dataverse records -v, --verbosity Verbose output -i ROR, --ror ROR REQUIRED: Institutional ROR URL. Eg: \"https://ror.org/03rmrcq20\". This identifies the institution in Dryad repositories. --tmpfile TMP Temporary file location. Default: /tmp --db DBASE Tracking database location and name. Default: $HOME/dryad_dataverse_monitor.sqlite3 --log LOG Complete path to log. Default: /var/log/dryadd.log -l, --no_force_unlock No forcible file unlock. Required if /lock endpint is restricted -x EXCLUDE [EXCLUDE ...], --exclude EXCLUDE [EXCLUDE ...] Exclude these DOIs. Separate by spaces -b NUM_BACKUPS, --num-backups NUM_BACKUPS Number of database backups to keep. Default 3 -w, --warn-too-many Warn and halt execution if abnormally large number of updates present. --warn-threshold WARN Do not transfer studies if number of updates is greater than or equal to this number. Default: 15 --version Show version number and exit","title":"Usage"},{"location":"script/#requirements","text":"Software If you installed using pip the requirements will be filled by default (see the installation document for more details). If using a binary file, it must be supported by your operating system and system architecture (eg. Intel Mac). Hardware You will need sufficient storage space on your system to hold the contents of the largest Dryad record that you are transferring. This is not necessarily a small amount; Dryad studies can range into the tens or hundreds of Gb, which means that a \u201cnormal\u201d /tmp directory will normally not have enough space allocated to it. The software will work on one study at a time and delete the files as it goes, but there are studies in the Dryad repository that are huge, even if most of them are quite small. Other A destination Dataverse must exist, and you should know its short name. The API key must have sufficient privileges to create new studies and upload data. You will need an email address for contact information as this is a required field in Dataverse (but not necessarily in Dryad) and a name to go with it. For example, i_heart_data@test.invalid and Dataverse Support . Note: Use a valid email address (unlike the example) because uploads will also fail if the address is invalid. Information for an email address which sends notifications The sending email address (\u201cuser@test.invalid\u201d) The user name (usually, but not always, \u201cuser\u201d from \u201cuser@test.invalid\u201d) The password for this account The smtp server address which sends mail. For example, if using gmail, it\u2019s smtp.gmail.com The port required to send email via SSL. At least one email address to receive update and error notifications. This can be the same as the sender. A place to store your sqlite3 tracking database. A note about GMail Dryad2dataverse is now set up to use yahoo email by default, because it doesn\u2019t require two-factor authentication to use. If you decide to use Google mail, you will need to follow the procedure outlined here https://support.google.com/accounts/answer/185833?hl=en . Note that it will require enabling two-factor authentication. Updates to Dryad studies The software is designed to automatically update changed studies. Simply run the utility with the same parameters as the previous run and any studies in Dataverse will be updated Miscellaneous The dryadd/.py/.exe works best if run at intervals. This can easily be achieved by adding it to your system\u2019s crontab or using the Windows scheduler. Currently it does not run as a system or service, although it may in the future. Dryad itself is constantly changing, as is Dataverse. Although the software should work predictably, changes in both the Dryad API and Dataverse API can cause unforeseen consequences. To act as a backup against catastrophic error, the monitoring database is automatically copied and renamed with a timestamp. Although the default number of backups is 3 by default, any number of backups can be kept. Obviously, if you run the software once a minute this isn\u2019t helpful, but it could be if you update once a month.","title":"Requirements"},{"location":"track/","text":"The tracking database documentation was automatically generated by SchemasSpy and doesn\u2019t fit in nicely with the structure of this documentation. The link below will open in a new page/tab. Tracking database information","title":"Tracking Database Structure"}]}